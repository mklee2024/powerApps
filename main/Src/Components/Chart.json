{
  "ComponentAllowCustomization": true,
  "ComponentChangedSinceFileImport": false,
  "ComponentDefinitionInfo": {
    "AllowAccessToGlobals": false,
    "Children": [
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          "X",
          "Y",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "640",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "277",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "565",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Header_1",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 193,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": " Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n    Concatenate(\r\n        \"data:image/svg+xml;charset=utf8,\", \r\n        \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & Header_1.Width & \" \" & Header_1.Height & \"'>\",\r\n        If(!IsBlank(Chart.Title.text), Concatenate(\r\n            \"<g>\",\r\n                \"<text x='\" & Round(Switch(Chart.Title.align,\"left\",0,\"right\", Header_1.Width, Header_1.Width/2),3) & \"' \" &\r\n                        \"y='\" & Chart.Title.paddingTop & \"' \" &\r\n                        \"dy='1em' \" &\r\n                        \"text-anchor='\" & Switch(Chart.Title.align,\"left\",\"start\",\"right\",\"end\",\"middle\") &\"'>\" &\r\n                    \"<tspan style='\" &\r\n                            \"fill:\" & Chart.Title.color & \";\" &\r\n                            \"font-size:\" & Chart.Title.fontSize & \"px;\" &\r\n                            \"font-family:\" & Chart.Title.fontFamily & \";\" &\r\n                            \"font-weight:\" & Chart.Title.fontWeight & \";\" &\r\n                            \"font-style:\" & Chart.Title.fontStyle & \";\" & Chart.Title.additionalStyles & \"'>\" &\r\n                        Chart.Title.text &\r\n                    \"</tspan>\",\r\n                    If(!IsBlank(Chart.Subtitle.text), \r\n                        \"<tspan \" & Switch(Chart.Subtitle.align,\r\n                                    \"left\",\"text-anchor='start' x='0' \",\r\n                                    \"right\",\"text-anchor='end' x='\" & Round(Header_1.Width,3) & \"' \",\r\n                                    \"center\",\"x='\" & Round(Header_1.Width/2,3) & \"' \") &\r\n                                \"y='\" & (Chart.Title.paddingTop + Chart.Title.height + Chart.Subtitle.paddingTop) & \"' \" &\r\n                                \"dy='0em' \" &\r\n                                \"style='\" &\r\n                            \"fill:\" & Chart.Subtitle.color & \";\" &\r\n                            \"font-size:\" & Chart.Subtitle.fontSize & \"px;\" &\r\n                            \"font-family:\" & Chart.Subtitle.fontFamily & \";\" &\r\n                            \"font-weight:\" & Chart.Subtitle.fontWeight & \";\" &\r\n                            \"font-style:\" & Chart.Subtitle.fontStyle & \";\" & Chart.Subtitle.additionalStyles & \"'>\" &\r\n                            Chart.Subtitle.text &\r\n                        \"</tspan>\"),\r\n                \"</text>\",\r\n            \"</g>\"\r\n        )),\r\n        \"</svg>\"\r\n    ),\r\n\"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Header_1.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Parent.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Parent.Title.paddingTop + Parent.Title.height + If(IsBlank(Parent.Subtitle.text), 0, Parent.Subtitle.paddingTop + Parent.Subtitle.height)",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Header_1.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Header_1.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Header_1.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Header_1.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "11",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "566",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Pie",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 194,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Pie\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n                Concat(Table({\r\n                    radius:Round(Value(Coalesce(LookUp(Chart.Options, key = \"pie.radius\").value,\"1\")),3),\r\n                    innerRadius:Round(Value(LookUp(Chart.Options, key = \"pie.innerRadius\").value),3),\r\n                    startAngle:Round(Value(LookUp(Chart.Options, key = \"pie.startAngle\").value),3),\r\n                    semiCircle:LookUp(Chart.Options, key = \"pie.semiCircle\").value = \"true\",\r\n                    roseType:LookUp(Chart.Options, key = \"pie.roseType\").value,\r\n                    dataLabels:{\r\n                        enabled:LookUp(Chart.Options, key=\"pie.dataLabels\").value = \"true\",\r\n                        fontFamily:LookUp(Chart.Options, key = \"pie.dataLabels.fontFamily\").value,\r\n                        fontSize:Round(Value(Coalesce(LookUp(Chart.Options, key = \"pie.dataLabels.fontSize\").value,\"20\")),3),\r\n                        fontWeight:Coalesce(LookUp(Chart.Options, key = \"pie.dataLabels.fontWeight\").value,\"bold\"),\r\n                        fontStyle:Coalesce(LookUp(Chart.Options, key = \"pie.dataLabels.fontStyle\").value,\"normal\"),\r\n                        color:Coalesce(LookUp(Chart.Options, key = \"pie.dataLabels.color\").value,\"#666666\"),\r\n                        additionalStyles:LookUp(Chart.Options, key = \"pie.dataLabels.additionalStyles\").value\r\n                    },\r\n                    labels:Chart.Data.labels,\r\n                    values:LookUp(Chart.Data.table, key=\"values\", values)\r\n                }),\r\n                If(CountRows(values) > 0 && Sum(values,Value) > 0,\r\n                    Concat(AddColumns(Table({\r\n                        dataLabelEnabled: And(dataLabels.enabled, width > (Max(labels,Len(Value)) + 7) * dataLabels.fontSize * 1.2),\r\n                        rx:Round(width / 2,3),\r\n                        ry:Round(height / 2,3),\r\n                        startAngle:If(semiCircle,-180,startAngle),\r\n                        sum:Sum(values, Value),\r\n                        data:ForAll(Filter(indexes, index <= CountRows(values)),{\r\n                            label:Last(FirstN(labels,index)).Value,\r\n                            value:Last(FirstN(values,index)).Value,\r\n                            color:Last(FirstN(colors,index)).color,\r\n                            rotateDegs:Round(If(semiCircle,180,360) * If(roseType = \"area\", (index - 1) / CountRows(values), Sum(FirstN(values,index - 1),Value) / Sum(values,Value)),3),\r\n                            degs:Round(If(semiCircle,180,360) * If(roseType = \"area\", 1 / CountRows(values), Last(FirstN(values,index)).Value / Sum(values,Value)),3)\r\n                        }),\r\n                        max:Max(values,Value)\r\n                    }),\r\n                        \"radius\", Round(radius * Min(If(dataLabelEnabled,width - (Max(labels,Len(Value)) + 7) * dataLabels.fontSize * 1.2, width), If(semiCircle,height * 2, height)) / 2,3)\r\n                    ),\r\n                    \"<style>\" &\r\n                        If(dataLabels.enabled,\".data-label{fill:\" & dataLabels.color & \";font-family:\" & dataLabels.fontFamily & \";font-size:\" & dataLabels.fontSize & \"px;font-weight:\" & dataLabels.fontWeight & \";font-style:\" & dataLabels.fontStyle & \";\" & dataLabels.additionalStyles &\"}\") &\r\n                    \"</style>\" &\r\n                    \"<g transform='translate(\" & rx & \",\" & Round(ry + If(semiCircle,radius / 2),3) & \")'>\" &\r\n                        Concat(AddColumns(AddColumns(AddColumns(data,\r\n                                \"outerRadius\",If(roseType = \"radius\",\r\n                                        Round((value / max) * radius * (1 - innerRadius) + radius * innerRadius,3),\r\n                                    roseType = \"area\",\r\n                                        Round(Sqrt((value / max) * (1 - innerRadius * innerRadius) + innerRadius * innerRadius) * radius,3),\r\n                                        radius),\r\n                                \"innerRadiusValue\",Round(radius * innerRadius,3),\r\n                                \"actualRotateDegs\", Round(rotateDegs + startAngle,3),\r\n                                \"percentage\",Round(value * 100.0 / sum,1) & \"%\"\r\n                            ),\r\n                                \"isLargeArc\",If(degs >= 180,\"1\",\"0\"),\r\n                                \"x1\",Round(Cos(Radians(degs)) * outerRadius,3),\r\n                                \"y1\",Round(Sin(Radians(degs)) * outerRadius,3),\r\n                                \"x2\",Round(Cos(Radians(degs)) * innerRadiusValue,3),\r\n                                \"y2\",Round(Sin(Radians(degs)) * innerRadiusValue,3),\r\n                                \"xLine\",Round(Cos(Radians(actualRotateDegs + degs / 2)) * outerRadius,3),\r\n                                \"yLine\",Round(Sin(Radians(actualRotateDegs + degs / 2)) * outerRadius,3)\r\n                            ),\r\n                                \"xLineEnd\",Round(xLine / Abs(xLine) * (radius + 20),3),\r\n                                \"xLabel\",Round(xLine / Abs(xLine) * (radius + 25),3),\r\n                                \"labelAnchor\",If(xLine > 0,\"start\",\"end\")\r\n                            ),\r\n                            \"<path transform='rotate(\" & actualRotateDegs & \",0,0)' \" &\r\n                                \"d='M\" & radius & \",0.01\" & \r\n                                    \"A\" & radius & \",\" & radius & \",0,\" & isLargeArc & \",1,\" & x1 & \",\" & y1 &\r\n                                    \"L\" & x2 & \",\" & y2 &\r\n                                    \"A\" & innerRadiusValue & \",\" & innerRadiusValue & \",0,\" & isLargeArc & \",0,\" & innerRadiusValue & \",0.01Z' \" &\r\n                                \"fill='\" & color & \"' stroke-width='0' fill-rule='evenodd'/>\" &\r\n                            If(dataLabelEnabled,\r\n                                \"<path fill='none' stroke-width='1' stroke-opacity='0.4' stroke='\" & dataLabels.color & \"' d='M\"&xLine&\",\"&yLine&\"H\"&xLineEnd&\"'/>\" &\r\n                                \"<text class='data-label' x='\"&xLabel&\"' y='\"&yLine&\"' dy='.35em' text-anchor='\"&labelAnchor&\"'>\" &\r\n                                    label & \", \" & percentage &\r\n                                \"</text>\"\r\n                            )\r\n                        ) &\r\n                    \"</g>\"\r\n                ))),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Pie.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Pie.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Pie.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Pie.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Pie.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "567",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Funnel",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 195,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Funnel\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n                Concat(AddColumns(Table({\r\n                    mode:LookUp(Chart.Options, key=\"funnel.mode\").value,\r\n                    sort:LookUp(Chart.Options, key=\"funnel.sort\").value,\r\n                    align:LookUp(Chart.Options, key=\"funnel.align\").value,\r\n                    maxWidth:Round(Value(Coalesce(LookUp(Chart.Options, key=\"funnel.maxBarLength\").value,\"1\")),3),\r\n                    itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key=\"funnel.itemGap\").value,\"10\")),3),\r\n                    connectorColor:LookUp(Chart.Options, key=\"funnel.connectorColor\").value,\r\n                    connectorOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key=\"funnel.connectorOpacity\").value,\"0.3\")),3),\r\n                    orientation:LookUp(Chart.Options, key=\"funnel.orientation\").value,\r\n                    labelStyle:{\r\n                        enabled:LookUp(Chart.Options, key = \"funnel.labels\").value = \"true\",\r\n                        align:LookUp(Chart.Options, key = \"funnel.labels.align\").value,\r\n                        verticalAlign:LookUp(Chart.Options, key = \"funnel.labels.verticalAlign\").value,\r\n                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"funnel.labels.fontSize\").value,\"20\")),3),\r\n                        fontFamily: LookUp(Chart.Options, key = \"funnel.labels.fontFamily\").value,\r\n                        fontWeight: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.fontWeight\").value,\"bold\"),\r\n                        fontStyle: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.fontStyle\").value,\"normal\"),\r\n                        color: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.color\").value,\"#ffffff\"),\r\n                        additionalStyles: LookUp(Chart.Options, key=\"funnel.labels.additionalStyles\").value\r\n                    },\r\n                    dataStyle:{\r\n                        enabled:LookUp(Chart.Options, key = \"funnel.labels.value\").value = \"true\",\r\n                        dx:Round(Value(Coalesce(LookUp(Chart.Options, key = \"funnel.labels.value.dx\").value,\"0\")),3),\r\n                        dy:Round(Value(Coalesce(LookUp(Chart.Options, key = \"funnel.labels.value.dy\").value,\"0\")),3),\r\n                        format:Coalesce(LookUp(Chart.Options, key = \"funnel.labels.value.format\").value,\"0\"),\r\n                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"funnel.labels.value.fontSize\").value,\"12\")),3),\r\n                        fontFamily: LookUp(Chart.Options, key = \"funnel.labels.value.fontFamily\").value,\r\n                        fontWeight: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.value.fontWeight\").value,\"bold\"),\r\n                        fontStyle: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.value.fontStyle\").value,\"normal\"),\r\n                        color: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.value.color\").value,\"#ffffff\"),\r\n                        additionalStyles: LookUp(Chart.Options, key=\"funnel.labels.value.additionalStyles\").value\r\n                    },\r\n                    percentageStyle:{\r\n                        enabled:LookUp(Chart.Options, key = \"funnel.labels.percentage\").value = \"true\",\r\n                        mode:LookUp(Chart.Options, key = \"funnel.labels.percentage.mode\").value,//last,max,sum\r\n                        dx:Round(Value(Coalesce(LookUp(Chart.Options, key = \"funnel.labels.percentage.dx\").value,\"0\")),3),\r\n                        dy:Round(Value(Coalesce(LookUp(Chart.Options, key = \"funnel.labels.percentage.dy\").value,\"0\")),3),\r\n                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"funnel.labels.percentage.fontSize\").value,\"12\")),3),\r\n                        fontFamily: LookUp(Chart.Options, key = \"funnel.labels.percentage.fontFamily\").value,\r\n                        fontWeight: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.percentage.fontWeight\").value,\"bold\"),\r\n                        fontStyle: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.percentage.fontStyle\").value,\"normal\"),\r\n                        color: Coalesce(LookUp(Chart.Options, key=\"funnel.labels.percentage.color\").value,\"#ffffff\"),\r\n                        additionalStyles: LookUp(Chart.Options, key=\"funnel.labels.percentage.additionalStyles\").value\r\n                    },\r\n                    labels:Chart.Data.labels,\r\n                    values:ForAll(LookUp(Chart.Data.table, key=\"values\").values,{Value:Round(Value(Value),3)})\r\n                }),\r\n                    \"width\",If(orientation = \"horizontal\",height,width),\r\n                    \"height\",If(orientation = \"horizontal\",width,height),\r\n                    \"cx\",Round(width / 2,3),\r\n                    \"cy\",Round(height / 2,3)\r\n                ),\r\n                If(CountRows(values) > 0 && Sum(values,Value) > 0,\r\n                    Concat(Table({\r\n                        data:ForAll(FirstN(indexes, CountRows(values)),{\r\n                            index:index,\r\n                            label:Last(FirstN(labels,index)).Value,\r\n                            value:Last(FirstN(values,index)).Value,\r\n                            color:Last(FirstN(colors,index)).color\r\n                        }),\r\n                        max:Max(values,Value),\r\n                        maxWidth:Round(width * maxWidth,3),\r\n                        sum:Round(Sum(values,Value),3),\r\n                        barContainerHeight:Round((height + itemGap) / CountRows(values),3),\r\n                        align:If((orientation <> \"horizontal\" && align = \"left\") || (orientation = \"horizontal\" && align = \"bottom\"),\"start\",(orientation <> \"horizontal\" && align = \"right\") || (orientation = \"horizontal\" && align = \"top\"),\"end\",\"middle\")\r\n                    }),\r\n                    \"<g transform='translate(\" & Round(Switch(align,\"start\",0,\"end\",width,cx),3) & \",0)\" & \r\n                        If(orientation = \"horizontal\", \"rotate(-90,0,0)translate(\"& Round(If(align = \"start\",-width,align=\"end\",0,-cy),3) &\",\"&Round(If(align = \"start\",0,align=\"end\",-width,-cx),3)&\")\") & \"'>\" &\r\n                        \"<style>\" &\r\n                        If(labelStyle.enabled,\".data-label{fill:\" & labelStyle.color & \";font-family:\" & labelStyle.fontFamily & \";font-size:\" & labelStyle.fontSize & \"px;font-weight:\" & labelStyle.fontWeight & \";font-style:\" & labelStyle.fontStyle & \";\" & labelStyle.additionalStyles &\"}\") &\r\n                        If(dataStyle.enabled,\".value-label{fill:\" & dataStyle.color & \";font-family:\" & dataStyle.fontFamily & \";font-size:\" & dataStyle.fontSize & \"px;font-weight:\" & dataStyle.fontWeight & \";font-style:\" & dataStyle.fontStyle & \";\" & dataStyle.additionalStyles &\"}\") &\r\n                        If(percentageStyle.enabled,\".percentage-label{fill:\" & percentageStyle.color & \";font-family:\" & percentageStyle.fontFamily & \";font-size:\" & percentageStyle.fontSize & \"px;font-weight:\" & percentageStyle.fontWeight & \";font-style:\" & percentageStyle.fontStyle & \";\" & percentageStyle.additionalStyles &\"}\") &\r\n                        \"</style>\" &\r\n                        Concat(AddColumns(Table({data:ForAll(FirstN(indexes, CountRows(values)),{\r\n                                index:index,\r\n                                d:Last(FirstN(Switch(sort,\"ascending\",SortByColumns(data,\"value\",SortOrder.Ascending),\"descending\",SortByColumns(data,\"value\",SortOrder.Descending),data),index))\r\n                            })\r\n                        }),\"dataWithId\",RenameColumns(data,\"index\",\"id\")),\r\n                            Concat(Table({data:AddColumns(AddColumns(AddColumns(AddColumns(data,\r\n                                \"percentage\",Round(Switch(percentageStyle.mode,\"last\",d.value / If(index = 1,d.value,LookUp(dataWithId,id = index - 1).d.value),\"max\",d.value / max,d.value / sum) * 100,1) & \"%\",\r\n                                \"connectorColor\", If(IsBlank(connectorColor),d.color,connectorColor),\r\n                                \"h1\", Sqrt(height * height * Sum(Filter(dataWithId,id < index),d.value) / sum),\r\n                                \"h2\", Sqrt(height * height * Sum(Filter(dataWithId,id <= index),d.value) / sum),\r\n                                \"pad\", Round((width - maxWidth) / 2,3)\r\n                            ),\r\n                                \"levelWidth\", Round(If(mode=\"pyramid\", h1 * width / height ,(d.value / max) * maxWidth),3),\r\n                                \"nextLevelWidth\", Round(If(mode = \"pyramid\", h2 * width / height ,(If(mode = \"rectangle\", d, Coalesce(LookUp(dataWithId,index + 1 = id).d,If(mode<>\"pyramid\",d))).value / max) * maxWidth),3),\r\n                                \"levelHeight\", Round(If(mode=\"pyramid\",h2 - h1,barContainerHeight - itemGap),3)\r\n                            ),\r\n                                \"x\", Round(If(align = \"start\",pad,align=\"end\",-levelWidth - pad,-levelWidth/2),3),\r\n                                \"y\", Round(If(mode=\"pyramid\",h1,barContainerHeight * (index - 1)),3),\r\n                                \"x2\", Round(If(align = \"start\",pad,align=\"end\",-nextLevelWidth - pad,-nextLevelWidth/2),3)\r\n                            ),\r\n                                \"x1\", Round(x + levelWidth,3),\r\n                                \"y2\", Round(y + levelHeight,3),\r\n                                \"x3\", Round(x2 + nextLevelWidth,3)\r\n                            )}),\r\n                                Concat(data,\r\n                                    \"<path data='\" & d.value & \"' \" &\r\n                                        \"d='M\" & x & \",\" & y & \r\n                                            \"H\" & x1 & \"L\" & x3 & \",\" & y2 &\r\n                                            \"H\" & x2 & \"Z' \" &\r\n                                        \"fill='\" & d.color & \"' stroke-width='0' fill-rule='evenodd'></path>\" &\r\n                                    If(mode <> \"pyramid\",\"<path data='\" & d.value & \"' \" &\r\n                                        \"d='M\" & x2 & \",\" & y2 & \r\n                                            \"H\" & x3 & \"L\" & LookUp(RenameColumns(data,\"index\",\"id\"),id = index + 1).x1 & \",\" & Round(y2 + itemGap,3) &\r\n                                            \"H\" & LookUp(RenameColumns(data,\"index\",\"id\"),id = index + 1).x & \"Z' \" &\r\n                                        \"fill='\" & d.color & \"' \" &\r\n                                        \"fill-opacity='\" & connectorOpacity & \"' stroke-width='0' fill-rule='evenodd'></path>\") &\r\n                                    If(orientation = \"horizontal\",\r\n                                        \"<text class='data-label' transform='rotate(90,\" & Round((x + x1) / 2,3) & \",\" & Round((y+y2)/2,3) & \")' \" &\r\n                                            \"x='\"& Round((x + x1) / 2,3) &\"' \"&\r\n                                            \"y='\" & Round((y+y2)/2,3) & \"' \"&\r\n                                            \"dy='\" & Round((labelStyle.fontSize - dataStyle.fontSize - percentageStyle.fontSize - dataStyle.dy - percentageStyle.dy)/2,3) & \"' \"&\r\n                                            \"text-anchor='middle'>\" &\r\n                                            If(labelStyle.enabled,d.label) &\r\n                                            If(dataStyle.enabled,\" <tspan class='value-label' \" &\r\n                                                \"x='\"& Round((x + x1) / 2,3) &\"' \"&\r\n                                                \"dy='\"& Round(dataStyle.fontSize+dataStyle.dy,3) &\"'>\" &\r\n                                                Text(d.value, dataStyle.format) &\r\n                                            \"</tspan>\") &\r\n                                            If(percentageStyle.enabled,\" <tspan class='percentage-label' \" &\r\n                                                \"x='\" & Round((x + x1) / 2,3) &\"' \"&\r\n                                                \"dy='\"& Round(percentageStyle.fontSize+percentageStyle.dy,3) &\"'>\" &\r\n                                                percentage &\r\n                                            \"</tspan>\") &\r\n                                        \"</text>\",\r\n                                        \"<text class='data-label' \" &\r\n                                            \"x='\"& Switch(labelStyle.align,\"left\",x + 5,\"right\",x1 - 5,Round((x + x1) / 2,3)) &\"' \"&\r\n                                            \"y='\" & Switch(labelStyle.verticalAlign,\"top\",y + 5,\"bottom\",y2 - 5,Round((y+y2)/2,3)) & \"' \"&\r\n                                            \"text-anchor='\" & Switch(labelStyle.align,\"left\",\"start\",\"right\",\"end\",\"middle\") & \"' \" &\r\n                                            \"dy='\" & Switch(labelStyle.verticalAlign,\"top\",\"0.8em\",\"bottom\",\"0\",\"0.4em\") & \"'>\" &\r\n                                            If(labelStyle.enabled,d.label) &\r\n                                            If(dataStyle.enabled,\" <tspan class='value-label' \" &\r\n                                                \"dx='\"& dataStyle.dx &\"' \" &\r\n                                                \"dy='\"& dataStyle.dy &\"'>\" &\r\n                                                Text(d.value, dataStyle.format) &\r\n                                            \"</tspan>\") &\r\n                                            If(percentageStyle.enabled,\" <tspan class='percentage-label' \" &\r\n                                                \"dx='\"& percentageStyle.dx &\"' \" &\r\n                                                \"dy='\"& percentageStyle.dy &\"'>\" &\r\n                                                percentage &\r\n                                            \"</tspan>\") &\r\n                                        \"</text>\"\r\n                                    )\r\n                                )\r\n                        )) &\r\n                    \"</g>\"\r\n                ))),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Funnel.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Funnel.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Funnel.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Funnel.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Funnel.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "3",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "568",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "SolidGauge",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 196,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Solid Gauge\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n                Concat(Table({\r\n                    yAxis:{\r\n                        labels:{\r\n                            enabled: LookUp(Chart.Options, key=\"y.labels\").value <> \"false\",\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.labels.fontSize\").value,\"12\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"y.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"y.labels.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"y.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    xAxis:{\r\n                        labels:{\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.labels.fontSize\").value,\"14\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"x.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontStyle\").value,\"normal\"),\r\n                            color: LookUp(Chart.Options, key=\"x.labels.color\").value,\r\n                            additionalStyles: LookUp(Chart.Options, key=\"x.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key = \"solidGauge.itemGap\").value,\"5\")),3),\r\n                    minRadius:Round(Value(Coalesce(LookUp(Chart.Options, key = \"solidGauge.minRadius\").value,\"0.3\")),3),\r\n                    labels:Chart.Data.labels,\r\n                    values:LookUp(Chart.Data.table, key=\"values\", values)\r\n                }),\r\n                    Concat(Table({\r\n                        data:ForAll(FirstN(indexes,CountRows(labels)),{\r\n                            index:index,\r\n                            color:Last(FirstN(colors,index)).color,\r\n                            label:Last(FirstN(labels,index)).Value,\r\n                            value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)\r\n                        }),\r\n                        xSpaces:CountRows(labels),\r\n                        maxRadius:Round(If(yAxis.labels.enabled,Min(width - yAxis.labels.fontSize * 8, height - yAxis.labels.fontSize * 5),Min(width,height)) / 2,3)\r\n                    }),\r\n                        Concat(Table({\r\n                            minRadius:Round(maxRadius * minRadius,3),\r\n                            barWidth:Round(maxRadius * (1 - minRadius) / xSpaces - itemGap,3),\r\n                            offset:Round((maxRadius * (1 - minRadius) / xSpaces),3),\r\n                            centerX:Round(width/2,3),\r\n                            centerY:Round(height/2,3),\r\n                            data:AddColumns(data,\r\n                                \"angle\", Round(value / 100.0 * 270,3)\r\n                            )\r\n                        }),\r\n                            //Y Axis\r\n                            If(yAxis.labels.enabled,\r\n                            \"<style>\" &\r\n                                \".y-labels{fill:\"& yAxis.labels.color &\";font-size:\" & yAxis.labels.fontSize & \"px;font-family:'\" & yAxis.labels.fontFamily & \"';font-weight:\" & yAxis.labels.fontWeight & \";font-style:\" & yAxis.labels.fontStyle & \";\" & yAxis.labels.additionalStyles & \"}\"&\r\n                            \"</style>\" &\r\n                            Concat(AddColumns(AddColumns(FirstN(indexes,11),\r\n                                \"value\",Round((index - 1) * 10,0),\r\n                                \"label\",Round((index - 1) * 10,0) & \"%\",\r\n                                \"angle\",Round((index - 1) / 10.0 * 270,3),\r\n                                \"r\",Round(maxRadius + yAxis.labels.fontSize * 2,3)\r\n                            ),\r\n                                \"x\", Round(centerX + Cos(Radians(angle - 90)) * r,3),\r\n                                \"y\", Round(centerY + Sin(Radians(angle - 90)) * r,3)\r\n                            ),\r\n                                \"<text class='y-labels' dy='.4em' \" &\r\n                                    \"x='\"&x&\"' \"&\r\n                                    \"y='\"&y&\"' \"&\r\n                                    \"text-anchor='middle'>\"&\r\n                                    label &\r\n                                \"</text>\"\r\n                            )) &\r\n                            \"<style>\" &\r\n                                \".x-labels{font-size:\" & xAxis.labels.fontSize & \"px;font-family:'\" & xAxis.labels.fontFamily & \"';font-weight:\" & xAxis.labels.fontWeight & \";font-style:\" & xAxis.labels.fontStyle & \";\" & xAxis.labels.additionalStyles & \"}\"&\r\n                            \"</style>\" &\r\n                            Concat(AddColumns(AddColumns(data,\r\n                                \"r\", Round(maxRadius - (index - 0.5) * offset, 3),\r\n                                \"large\", If(angle >= 180,1,0)\r\n                            ),\r\n                                \"x\", Round(centerX + Cos(Radians(angle - 90)) * r,3),\r\n                                \"y\", Round(centerY + Sin(Radians(angle - 90)) * r,3)\r\n                            ),\r\n                            \"<g>\" &\r\n                                \"<text class='x-labels' dy='.4em' \" &\r\n                                    \"dx='\"&Round(-barWidth / 2 - 10,3)&\"' \" &\r\n                                    \"fill='\"&If(IsBlank(xAxis.labels.color),color,xAxis.labels.color)&\"' \" &\r\n                                    \"x='\"&centerX&\"' \" &\r\n                                    \"y='\"&Round(centerY - r,3)&\"' \" &\r\n                                    \"text-anchor='end'>\" & \r\n                                    label &\r\n                                \"</text>\" &\r\n                                \"<path fill='none' \"&\r\n                                    \"stroke-opacity='0.08' \" &\r\n                                    \"stroke-linecap='round' \" &\r\n                                    \"stroke='#000000' \"&\r\n                                    \"stroke-width='\"& barWidth &\"' \"&\r\n                                    \"d='M\"&centerX&\",\"&Round(centerY - r,3)&\r\n                                        \"A\"&r&\",\"&r&\",270,1,1,\"&Round(centerX - r,3)&\",\"&centerY&\"'/>\" &\r\n                                \"<path fill='none' \"&\r\n                                    \"stroke-linecap='round' \" &\r\n                                    \"stroke='\"&color&\"' \"&\r\n                                    \"stroke-width='\"& barWidth &\"' \"&\r\n                                    \"d='M\"&centerX&\",\"&Round(centerY - r,3)&\r\n                                        \"A\"&r&\",\"&r&\",\"&angle&\",\"&large&\",1,\"&x&\",\"&y&\"'/>\" &\r\n                            \"</g>\"\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(SolidGauge.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(SolidGauge.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "SolidGauge.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(SolidGauge.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(SolidGauge.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "4",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "569",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Candle",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 197,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Candle\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n                Concat(Table({\r\n                    xAxis:{\r\n                        enabled: LookUp(Chart.Options, key=\"x\").value <> \"false\",\r\n                        title: LookUp(Chart.Options, key=\"x.title\").value,\r\n                        titleStyle: {\r\n                            y:Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.y\").value,\"-10\")),3),\r\n                            align:If(LookUp(Chart.Options, key=\"x.title.align\").value = \"left\",\"left\",\"right\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.fontSize\").value,\"14\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"x.title.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.title.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.title.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"x.title.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"x.title.additionalStyles\").value\r\n                        },\r\n                        style: {\r\n                            height: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.height\").value,\"50\")),3),\r\n                            lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.lineWidth\").value,\"1\")),3),\r\n                            lineColor: Coalesce(LookUp(Chart.Options, key = \"x.lineColor\").value,\"#333333\"),\r\n                            tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickLength\").value,\"5\")),3),\r\n                            tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickWidth\").value,\"1\")),3)\r\n                        },\r\n                        labels: {\r\n                            enabled: LookUp(Chart.Options, key=\"x.labels\").value <> \"false\",\r\n                            format: LookUp(Chart.Options, key = \"x.labels.format\").value,\r\n                            rotation: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.labels.rotation\").value,\"-40\")),3),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.labels.fontSize\").value,\"12\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"x.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"x.labels.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"x.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    yAxis:{\r\n                        enabled: LookUp(Chart.Options, key=\"y\").value <> \"false\",\r\n                        title: LookUp(Chart.Options, key=\"y.title\").value,\r\n                        titleStyle: {\r\n                            align:If(LookUp(Chart.Options, key=\"y.title.align\").value = \"left\",\"left\",\"right\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.title.fontSize\").value,\"14\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"y.title.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.title.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.title.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"y.title.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"y.title.additionalStyles\").value\r\n                        },\r\n                        align:Coalesce(LookUp(Chart.Options, key=\"y.align\").value,\"left\"),\r\n                        step:Round(Value(LookUp(Chart.Options, key = \"y.step\").value),3),\r\n                        min:Round(Value(LookUp(Chart.Options, key = \"y.min\").value),3),\r\n                        max:Round(Value(LookUp(Chart.Options, key = \"y.max\").value),3),\r\n                        style: {\r\n                            width: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.width\").value,\"50\")),3),\r\n                            lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.lineWidth\").value,\"1\")),3),\r\n                            lineColor: Coalesce(LookUp(Chart.Options, key = \"y.lineColor\").value,\"#333333\"),\r\n                            tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickLength\").value,\"5\")),3),\r\n                            tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickWidth\").value,\"1\")),3),\r\n                            padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.padTop\").value,\"20\")),3)\r\n                        },\r\n                        labels: {\r\n                            enabled: LookUp(Chart.Options, key=\"y.labels\").value <> \"false\",\r\n                            format: Coalesce(LookUp(Chart.Options, key = \"y.labels.format\").value,\"0\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.labels.fontSize\").value,\"12\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"y.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"y.labels.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"y.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    style:{\r\n                        downColor:Coalesce(LookUp(Chart.Options, key = \"candle.downColor\").value,\"#00da3c\"),\r\n                        upColor:Coalesce(LookUp(Chart.Options, key = \"candle.upColor\").value,\"#ec0000\"),\r\n                        downBorderColor:Coalesce(LookUp(Chart.Options, key = \"candle.downBorderColor\").value,\"#008f28\"),\r\n                        upBorderColor:Coalesce(LookUp(Chart.Options, key = \"candle.upBorderColor\").value,\"#8a0000\"),\r\n                        itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key = \"candle.itemGap\").value,\"5\")),3),\r\n                        fillOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key = \"candle.fillOpacity\").value,\"1\")),3),\r\n                        borderWidth:Round(Value(Coalesce(LookUp(Chart.Options, key = \"candle.borderWidth\").value,\"1\")),3)\r\n                    },\r\n                    labels:Chart.Data.labels,\r\n                    open:ForAll(LookUp(Chart.Data.table, key=\"open\").values,{Value:Round(Value(Value),3)}),\r\n                    close:ForAll(LookUp(Chart.Data.table, key=\"close\").values,{Value:Round(Value(Value),3)}),\r\n                    lowest:ForAll(LookUp(Chart.Data.table, key=\"lowest\").values,{Value:Round(Value(Value),3)}),\r\n                    highest:ForAll(LookUp(Chart.Data.table, key=\"highest\").values,{Value:Round(Value(Value),3)})\r\n                }),\r\n                    Concat(Table({\r\n                        data:ForAll(Filter(indexes,index<=CountRows(labels)),{\r\n                            id:index,\r\n                            open:If(CountRows(open) < index, 0, Last(FirstN(open,index)).Value),\r\n                            close:If(CountRows(close) < index, 0, Last(FirstN(close,index)).Value),\r\n                            lowest:If(CountRows(lowest) < index, 0, Last(FirstN(lowest,index)).Value),\r\n                            highest:If(CountRows(highest) < index, 0, Last(FirstN(highest,index)).Value)\r\n                        }),\r\n                        plot:{\r\n                            x:If(yAxis.enabled && yAxis.align = \"left\",yAxis.style.width,0),\r\n                            y:If(yAxis.enabled, yAxis.style.padTop, 0),\r\n                            width:If(yAxis.enabled, Round(width - yAxis.style.width,3), width),\r\n                            height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)\r\n                        },\r\n                        xSpaces:CountRows(labels) + 1\r\n                    }),\r\n                        Concat(AddColumns(AddColumns(Table({\r\n                            barWidth:Round(plot.width / xSpaces - style.itemGap,3),\r\n                            xSpaceWidth:Round((plot.width / xSpaces),3),\r\n                            labels:ForAll(FirstN(indexes,CountRows(labels)),{\r\n                                x:Round(index * (plot.width / xSpaces),3),\r\n                                labelText:Last(FirstN(labels,index)).Value\r\n                            }),\r\n                            data:AddColumns(data,\r\n                                \"up\", close >= open\r\n                            ),\r\n                            minTemp:If(yAxis.max <> yAxis.min,yAxis.min,Min(data,lowest)),\r\n                            max:If(yAxis.max <> yAxis.min,yAxis.max,Max(data,highest)),\r\n                            tickX:Round(If(yAxis.align = \"left\", -yAxis.style.tickLength, yAxis.style.tickLength),3),\r\n                            labelX:Round(If(yAxis.align = \"left\",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),\r\n                            labelAnchor:If(yAxis.align = \"left\",\"end\",\"start\")\r\n                        }), \"min\", If(minTemp>=0 && (max - minTemp) / 10 > minTemp,0,RoundDown(minTemp - (max - minTemp) / 10,0))),\r\n                            \"step\", If(yAxis.step = 0,RoundUp((max - min) / 5,0),yAxis.step),\r\n                            \"ratio\", plot.height / (min - max),\r\n                            \"halfBarWidth\", Round(barWidth / 2,3)),\r\n                        //X Axis\r\n                        \"<style>\" &\r\n                            \".x-labels{fill:\"& xAxis.labels.color &\";font-size:\" & xAxis.labels.fontSize & \"px;font-family:'\" & xAxis.labels.fontFamily & \"';font-weight:\" & xAxis.labels.fontWeight & \";font-style:\" & xAxis.labels.fontStyle & \";\" & xAxis.labels.additionalStyles & \"}\"&\r\n                            \".y-labels{fill:\"& yAxis.labels.color &\";font-size:\" & yAxis.labels.fontSize & \"px;font-family:'\" & yAxis.labels.fontFamily & \"';font-weight:\" & yAxis.labels.fontWeight & \";font-style:\" & yAxis.labels.fontStyle & \";\" & yAxis.labels.additionalStyles & \"}\"&\r\n                        \"</style>\" &\r\n                        If(xAxis.enabled,\"<g class='x-axis' transform='translate(\" & plot.x & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                            \"<path d='M0,0H\" & Round(plot.x + plot.width,3) & \"'  \"&\r\n                                \"fill='none' \" & \r\n                                \"stroke-width='\" & xAxis.style.lineWidth & \"' \" &\r\n                                \"stroke='\" & xAxis.style.lineColor & \"'/>\" &\r\n                            If(!IsBlank(xAxis.title), \"<text dy='0.35em' \" &\r\n                                \"text-anchor='\" & If(xAxis.titleStyle.align = \"left\",\"start\",\"end\") & \"' \" &\r\n                                \"x='\" & If(xAxis.titleStyle.align=\"left\",10,Round(width - yAxis.style.width - 10,3)) & \"' \" &\r\n                                \"y='\" & xAxis.titleStyle.y & \"' \" &\r\n                                \"style='\" &\r\n                                    \"fill:\" & xAxis.titleStyle.color & \";\" &\r\n                                    \"font-size:\" & xAxis.titleStyle.fontSize & \"px;\" &\r\n                                    \"font-family:\" & xAxis.titleStyle.fontFamily & \";\" &\r\n                                    \"font-weight:\" & xAxis.titleStyle.fontWeight & \";\" &\r\n                                    \"font-style:\" & xAxis.titleStyle.fontStyle & \";\" & xAxis.titleStyle.additionalStyles & \"'>\" &\r\n                                xAxis.title &\r\n                            \"</text>\") &\r\n                            \"<g>\" &\r\n                                Concat(labels,\r\n                                \"<g transform='translate(\" & x & \",0)'>\" &\r\n                                    \"<path d='M0,0V\" & xAxis.style.tickLength & \"' stroke-width='\" & xAxis.style.tickWidth & \"' stroke='\" & xAxis.style.lineColor & \"'/>\" &\r\n                                    If(xAxis.labels.enabled, \"<text transform='rotate(\" & xAxis.labels.rotation & \",0,5)' class='x-labels' dy='1em' y='5' text-anchor='\"& If(xAxis.labels.rotation > 0,\"start\",xAxis.labels.rotation < 0,\"end\", \"middle\") & \"' x='0'>\" &\r\n                                        labelText &\r\n                                    \"</text>\") &\r\n                                \"</g>\") &\r\n                            \"</g>\" &\r\n                        \"</g>\") &\r\n                        //Y Axis\r\n                        If(yAxis.enabled,\"<g class='y-axis' transform='translate(\" & If(yAxis.align = \"left\",0,Round(width - yAxis.style.width,3)) & \",0)'>\" &\r\n                            If(!IsBlank(yAxis.title), \"<text dy='.5em' \" &\r\n                                \"text-anchor='\" & If(yAxis.titleStyle.align = \"left\",\"end\",\"start\") & \"' \" &\r\n                                \"x='\" & Round(If(yAxis.align=\"left\",yAxis.style.width,0) + If(yAxis.titleStyle.align = \"left\",-10,10),3) & \"' \" &\r\n                                \"y='0' \" &\r\n                                \"style='\" &\r\n                                    \"fill:\" & yAxis.titleStyle.color & \";\" &\r\n                                    \"font-size:\" & yAxis.titleStyle.fontSize & \"px;\" &\r\n                                    \"font-family:\" & yAxis.titleStyle.fontFamily & \";\" &\r\n                                    \"font-weight:\" & yAxis.titleStyle.fontWeight & \";\" &\r\n                                    \"font-style:\" & yAxis.titleStyle.fontStyle & \";\" & yAxis.titleStyle.additionalStyles & \"'>\" &\r\n                                yAxis.title &\r\n                            \"</text>\") &\r\n                            \"<path transform='translate(\" & Round(If(yAxis.align = \"left\", yAxis.style.width, 0),3) & \",0)' d='M0,0L3,10L-3,10L0,0V\" & Round(plot.y + plot.height,3) & \"'  \"&\r\n                                \"fill='\" & yAxis.style.lineColor & \"' \" & \r\n                                \"stroke-width='\" & yAxis.style.lineWidth & \"' \" &\r\n                                \"stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                            \"<g>\" &\r\n                                \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                                    \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & xAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    If(yAxis.labels.enabled,\r\n                                    \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                        Text(min, yAxis.labels.format) &\r\n                                    \"</text>\") &\r\n                                \"</g>\" &\r\n                                Concat(ForAll(Filter(indexes, index <= RoundUp((max - min) / step,0)),{\r\n                                    y:Round(plot.y + (plot.height) * (1 - step * index / (max - min)),3),\r\n                                    label:Text(min + index * step, yAxis.labels.format)\r\n                                }),\r\n                                \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & y & \")'>\" &\r\n                                    \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & yAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    If(yAxis.labels.enabled,\r\n                                    \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                        label &\r\n                                    \"</text>\") &\r\n                                \"</g>\") &\r\n                            \"</g>\" &\r\n                        \"</g>\") &\r\n                        \"<g transform='translate(\"&plot.x&\",\"&Round(plot.y+plot.height,3)&\")'>\" &\r\n                            Concat(AddColumns(data,\r\n                                \"x\",Round(id * xSpaceWidth,3),\r\n                                \"fill\", If(up,style.upColor,style.downColor),\r\n                                \"stroke\", If(up,style.upBorderColor,style.downBorderColor),\r\n                                \"y1\", Round(ratio * (highest - min), 3),\r\n                                \"y2\", Round(ratio * (If(up, close, open) - min), 3),\r\n                                \"y3\", Round(ratio * (If(up, open, close) - min), 3),\r\n                                \"y4\", Round(ratio * (lowest - min), 3)\r\n                            ),\r\n                                \"<g class='bar' transform='translate(\" & Round(x-halfBarWidth,3) & \",0)' \" &\r\n                                        \"fill='\" & fill & \"' \" & \r\n                                        \"fill-opacity='\" & style.fillOpacity & \"' \" &\r\n                                        \"stroke='\" & stroke & \"' \" &\r\n                                        \"stroke-width='\" & style.borderWidth & \"'>\" &\r\n                                    \"<path d='M\" & halfBarWidth & \",\" & y1 & \"V\" & y2 & \"H0V\" & y3 & \"H\" & barWidth & \"V\" & y2 & \"H\" & halfBarWidth & \"M\" & halfBarWidth & \",\" & y3 & \"V\" & y4 & \"' \" &\r\n                                        \"fill='\" & fill & \"' />\" &\r\n                                \"</g>\"\r\n                            ) &\r\n                        \"</g>\"\r\n                        )\r\n                    )\r\n                ),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Candle.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Candle.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Candle.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Candle.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Candle.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "5",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "570",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Scatter",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 198,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Scatter\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n                Concat(Table({\r\n                    xAxis:{\r\n                        enabled: LookUp(Chart.Options, key=\"x\").value <> \"false\",\r\n                        title: LookUp(Chart.Options, key=\"x.title\").value,\r\n                        titleStyle: {\r\n                            y:Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.y\").value,\"-10\")),3),\r\n                            align:If(LookUp(Chart.Options, key=\"x.title.align\").value = \"left\",\"left\",\"right\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.fontSize\").value,\"14\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"x.title.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.title.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.title.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"x.title.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"x.title.additionalStyles\").value\r\n                        },\r\n                        step:Round(Value(LookUp(Chart.Options, key = \"x.step\").value),3),\r\n                        min:Round(Value(LookUp(Chart.Options, key = \"x.min\").value),3),\r\n                        max:Round(Value(LookUp(Chart.Options, key = \"x.max\").value),3),\r\n                        style: {\r\n                            height: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.height\").value,\"20\")),3),\r\n                            lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.lineWidth\").value,\"1\")),3),\r\n                            lineColor: Coalesce(LookUp(Chart.Options, key = \"x.lineColor\").value,\"#333333\"),\r\n                            tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickLength\").value,\"5\")),3),\r\n                            tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickWidth\").value,\"1\")),3),\r\n                            padRight:Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.padRight\").value,\"40\")),3)\r\n                        },\r\n                        labels: {\r\n                            enabled: LookUp(Chart.Options, key=\"x.labels\").value <> \"false\",\r\n                            format: Coalesce(LookUp(Chart.Options, key = \"x.labels.format\").value,\"0\"),\r\n                            rotation: Round(Value(LookUp(Chart.Options, key = \"x.labels.rotation\").value),3),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.labels.fontSize\").value,\"12\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"x.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"x.labels.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"x.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    yAxis:{\r\n                        enabled: LookUp(Chart.Options, key=\"y\").value <> \"false\",\r\n                        title: LookUp(Chart.Options, key=\"y.title\").value,\r\n                        titleStyle: {\r\n                            align:If(LookUp(Chart.Options, key=\"y.title.align\").value = \"left\",\"left\",\"right\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.title.fontSize\").value,\"14\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"y.title.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.title.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.title.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"y.title.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"y.title.additionalStyles\").value\r\n                        },\r\n                        align:Coalesce(LookUp(Chart.Options, key=\"y.align\").value,\"left\"),\r\n                        step:Round(Value(LookUp(Chart.Options, key = \"y.step\").value),3),\r\n                        min:Round(Value(LookUp(Chart.Options, key = \"y.min\").value),3),\r\n                        max:Round(Value(LookUp(Chart.Options, key = \"y.max\").value),3),\r\n                        style: {\r\n                            width: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.width\").value,\"50\")),3),\r\n                            lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.lineWidth\").value,\"1\")),3),\r\n                            lineColor: Coalesce(LookUp(Chart.Options, key = \"y.lineColor\").value,\"#333333\"),\r\n                            tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickLength\").value,\"5\")),3),\r\n                            tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickWidth\").value,\"1\")),3),\r\n                            padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.padTop\").value,\"20\")),3)\r\n                        },\r\n                        labels: {\r\n                            enabled: LookUp(Chart.Options, key=\"y.labels\").value <> \"false\",\r\n                            format: Coalesce(LookUp(Chart.Options, key = \"y.labels.format\").value,\"0\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.labels.fontSize\").value,\"12\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"y.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"y.labels.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"y.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    style:{\r\n                        maxSize:Round(Value(Coalesce(LookUp(Chart.Options, key = \"scatter.maxSize\").value,\"20\")),3),\r\n                        minSize:Round(Value(Coalesce(LookUp(Chart.Options, key = \"scatter.minSize\").value,\"10\")),3),\r\n                        fillOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key = \"scatter.fillOpacity\").value,\"1\")),3),\r\n                        borderWidth:Round(Value(LookUp(Chart.Options, key = \"scatter.borderWidth\").value),3),\r\n                        borderColor:LookUp(Chart.Options, key = \"scatter.borderColor\").value\r\n                    },\r\n                    legends:If(Chart.Legend.source = \"labels\", Chart.Data.labels, Chart.Data.legends)\r\n                }),\r\n                    Concat(Table({\r\n                        data:ForAll(FirstN(indexes,CountRows(legends)),{\r\n                            index:index,\r\n                            color:Last(FirstN(colors,index)).color,\r\n                            xValues:ForAll(LookUp(Chart.Data.table, key=index & \".x\").values,{Value:Round(Value(Value),3)}),\r\n                            yValues:ForAll(LookUp(Chart.Data.table, key=index & \".y\").values,{Value:Round(Value(Value),3)}),\r\n                            zValues:ForAll(LookUp(Chart.Data.table, key=index & \".z\").values,{Value:Round(Value(Value),3)})\r\n                        }),\r\n                        plot:{\r\n                            x:If(yAxis.enabled && yAxis.align = \"left\",yAxis.style.width,0),\r\n                            y:If(yAxis.enabled, yAxis.style.padTop, 0),\r\n                            width:Round(width - If(yAxis.enabled,yAxis.style.width) - If(xAxis.enabled,xAxis.style.padRight,0),3),\r\n                            height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)\r\n                        }\r\n                    }),\r\n                        Concat(AddColumns(Table({\r\n                            data:ForAll(data,{\r\n                                id:index,\r\n                                color:color,\r\n                                values:ForAll(FirstN(indexes,CountRows(xValues)),{\r\n                                    x:If(CountRows(xValues) < index, 0, Last(FirstN(xValues,index)).Value),\r\n                                    y:If(CountRows(yValues) < index, 0, Last(FirstN(yValues,index)).Value),\r\n                                    z:If(CountRows(zValues) < index, 0, Last(FirstN(zValues,index)).Value)\r\n                                })\r\n                            }),\r\n                            minX:If(xAxis.max <> xAxis.min,xAxis.min,RoundDown(Min(data,Min(xValues,Value)) - (Max(data,Max(xValues,Value)) - Min(data,Min(xValues,Value))) / 10,0)),\r\n                            maxX:If(xAxis.max <> xAxis.min,xAxis.max,RoundUp(Max(data,Max(xValues,Value)) + (Max(data,Max(xValues,Value)) - Min(data,Min(xValues,Value))) / 10,0)),\r\n                            minY:If(yAxis.max <> yAxis.min,yAxis.min,RoundDown(Min(data,Min(yValues,Value)) - (Max(data,Max(yValues,Value)) - Min(data,Min(yValues,Value))) / 10,0)),\r\n                            maxY:If(yAxis.max <> yAxis.min,yAxis.max,RoundUp(Max(data,Max(yValues,Value)),0)),\r\n                            minZ:RoundDown(Min(data,Min(zValues,Value)) - (Max(data,Max(zValues,Value)) - Min(data,Min(zValues,Value))) / 10,0),\r\n                            maxZ:RoundUp(Max(data,Max(zValues,Value)),0),\r\n                            tickX:Round(If(yAxis.align = \"left\", -yAxis.style.tickLength, yAxis.style.tickLength),3),\r\n                            labelX:Round(If(yAxis.align = \"left\",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),\r\n                            labelAnchor:If(yAxis.align = \"left\",\"end\",\"start\")\r\n                        }),\"stepX\",If(xAxis.step = 0,RoundUp((maxX - minX) / 5,0),xAxis.step)\r\n                           ,\"stepY\",If(yAxis.step = 0,RoundUp((maxY - minY) / 5,0),yAxis.step)),\r\n                        //X Axis\r\n                        \"<style>\" &\r\n                            \".x-labels{fill:\"& xAxis.labels.color &\";font-size:\" & xAxis.labels.fontSize & \"px;font-family:'\" & xAxis.labels.fontFamily & \"';font-weight:\" & xAxis.labels.fontWeight & \";font-style:\" & xAxis.labels.fontStyle & \";\" & xAxis.labels.additionalStyles & \"}\"&\r\n                            \".y-labels{fill:\"& yAxis.labels.color &\";font-size:\" & yAxis.labels.fontSize & \"px;font-family:'\" & yAxis.labels.fontFamily & \"';font-weight:\" & yAxis.labels.fontWeight & \";font-style:\" & yAxis.labels.fontStyle & \";\" & yAxis.labels.additionalStyles & \"}\"&\r\n                        \"</style>\" &\r\n                        If(xAxis.enabled,\"<g class='x-axis' transform='translate(\" & plot.x & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                            \"<path d='M0,0H\" & plot.width + xAxis.style.padRight & \"'  \"&\r\n                                \"fill='none' \" & \r\n                                \"stroke-width='\" & xAxis.style.lineWidth & \"' \" &\r\n                                \"stroke='\" & xAxis.style.lineColor & \"'/>\" &\r\n                            If(!IsBlank(xAxis.title), \"<text dy='0.35em' \" &\r\n                                \"text-anchor='\" & If(xAxis.titleStyle.align = \"left\",\"start\",\"end\") & \"' \" &\r\n                                \"x='\" & If(xAxis.titleStyle.align=\"left\",10,Round(width - yAxis.style.width - 10,3)) & \"' \" &\r\n                                \"y='\" & xAxis.titleStyle.y & \"' \" &\r\n                                \"style='\" &\r\n                                    \"fill:\" & xAxis.titleStyle.color & \";\" &\r\n                                    \"font-size:\" & xAxis.titleStyle.fontSize & \"px;\" &\r\n                                    \"font-family:\" & xAxis.titleStyle.fontFamily & \";\" &\r\n                                    \"font-weight:\" & xAxis.titleStyle.fontWeight & \";\" &\r\n                                    \"font-style:\" & xAxis.titleStyle.fontStyle & \";\" & xAxis.titleStyle.additionalStyles & \"'>\" &\r\n                                xAxis.title &\r\n                            \"</text>\") &\r\n                            If(xAxis.labels.enabled,\r\n                            \"<g>\" &\r\n                                \"<g>\" &\r\n                                    \"<path d='M0,0V\" & xAxis.style.tickLength & \"' stroke-width='\" & xAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    \"<text class='x-labels' dy='0.8em' y='\" & xAxis.style.tickLength & \"' x='0' \" &\r\n                                        \"transform='rotate(\" & xAxis.labels.rotation & \",0,5)' \" &\r\n                                        \"text-anchor='\" & If(xAxis.labels.rotation > 0, \"start\", xAxis.labels.rotation < 0, \"end\", \"middle\") & \"'>\" &\r\n                                        Text(minX,xAxis.labels.format) &\r\n                                    \"</text>\" &\r\n                                \"</g>\" &\r\n                                Concat(ForAll(Filter(indexes, index <= RoundUp((maxX - minX) / stepX,0)),{\r\n                                    x:Round(plot.width * ((stepX * index) / (maxX - minX)),3),\r\n                                    label:Text(minX + index * stepX, xAxis.labels.format)\r\n                                }),\r\n                                \"<g transform='translate(\" & x & \",0)'>\" &\r\n                                    \"<path d='M0,0V\" & xAxis.style.tickLength & \"' stroke-width='\" & xAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    \"<text class='x-labels' dy='0.8em' y='\" & xAxis.style.tickLength & \"' x='0' \" &\r\n                                        \"transform='rotate(\" & xAxis.labels.rotation & \",0,5)' \" &\r\n                                        \"text-anchor='\" & If(xAxis.labels.rotation > 0, \"start\", xAxis.labels.rotation < 0, \"end\", \"middle\") & \"'>\" &\r\n                                        label &\r\n                                    \"</text>\" &\r\n                                \"</g>\") &\r\n                            \"</g>\") &\r\n                        \"</g>\") &\r\n                        //Y Axis\r\n                        If(yAxis.enabled,\"<g class='y-axis' transform='translate(\" & If(yAxis.align = \"left\",0,Round(width - yAxis.style.width,3)) & \",0)'>\" &\r\n                            If(!IsBlank(yAxis.title), \"<text dy='.5em' \" &\r\n                                \"text-anchor='\" & If(yAxis.titleStyle.align = \"left\",\"end\",\"start\") & \"' \" &\r\n                                \"x='\" & Round(If(yAxis.align=\"left\",yAxis.style.width,0) + If(yAxis.titleStyle.align = \"left\",-10,10),3) & \"' \" &\r\n                                \"y='0' \" &\r\n                                \"style='\" &\r\n                                    \"fill:\" & yAxis.titleStyle.color & \";\" &\r\n                                    \"font-size:\" & yAxis.titleStyle.fontSize & \"px;\" &\r\n                                    \"font-family:\" & yAxis.titleStyle.fontFamily & \";\" &\r\n                                    \"font-weight:\" & yAxis.titleStyle.fontWeight & \";\" &\r\n                                    \"font-style:\" & yAxis.titleStyle.fontStyle & \";\" & yAxis.titleStyle.additionalStyles & \"'>\" &\r\n                                yAxis.title &\r\n                            \"</text>\") &\r\n                            \"<path transform='translate(\" & Round(If(yAxis.align = \"left\", yAxis.style.width, 0),3) & \",0)' d='M0,0L3,10L-3,10L0,0V\" & Round(plot.y + plot.height,3) & \"'  \"&\r\n                                \"fill='\" & yAxis.style.lineColor & \"' \" & \r\n                                \"stroke-width='\" & yAxis.style.lineWidth & \"' \" &\r\n                                \"stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                            \"<g>\" &\r\n                                \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                                    \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & xAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    If(yAxis.labels.enabled,\r\n                                    \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                        Text(minY, yAxis.labels.format) &\r\n                                    \"</text>\") &\r\n                                \"</g>\" &\r\n                                Concat(ForAll(Filter(indexes, index <= RoundUp((maxY - minY) / stepY,0)),{\r\n                                    y:Round(plot.y + (plot.height) * (1 - stepY * index / (maxY - minY)),3),\r\n                                    label:Text(minY + index * stepY, yAxis.labels.format)\r\n                                }),\r\n                                \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & y & \")'>\" &\r\n                                    \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & yAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    If(yAxis.labels.enabled,\r\n                                    \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                        label &\r\n                                    \"</text>\") &\r\n                                \"</g>\") &\r\n                            \"</g>\" &\r\n                        \"</g>\") &\r\n                        \"<g transform='translate(\"&plot.x&\",\"&Round(plot.y+plot.height,3)&\")'>\" &\r\n                            Concat(Sort(ForAll(data,{\r\n                                id:id,\r\n                                color:color,\r\n                                borderColor:Coalesce(style.borderColor,color),\r\n                                points:AddColumns(values,\r\n                                    \"xPos\",Round(plot.width * (x - minX) / (maxX - minX),3),\r\n                                    \"yPos\",Round(plot.height * (y - minY) / (minY - maxY),3),\r\n                                    \"radius\",Round((z-minZ) / (maxZ - minZ) * (style.maxSize - style.minSize) + style.minSize / 2,3)\r\n                                )\r\n                            }),id,SortOrder.Descending),\r\n                                \"<g fill='\"& color &\"' \" &\r\n                                    \"stroke='\"& borderColor &\"' \" &\r\n                                    \"stroke-width='\"& style.borderWidth &\"' \" &\r\n                                    \"fill-opacity='\"& style.fillOpacity &\"'>\" &\r\n                                Concat(points,\r\n                                    \"<circle data-z='\" & z & \"' data-min='\" & minZ & \"' data-max='\" & maxZ & \"' data-max-size='\" & style.maxSize & \"' data-min-size='\" & style.minSize & \"' cx='\" & xPos & \"' \" &\r\n                                        \"cy='\" & yPos & \"' \" &\r\n                                        \"r='\" & radius & \"'/>\") &\r\n                                \"</g>\"\r\n                            ) &\r\n                        \"</g>\"\r\n                        )\r\n                    )\r\n                ),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Scatter.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Scatter.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Scatter.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Scatter.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Scatter.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "6",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "571",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Bar",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 199,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Bar\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n                Concat(Table({\r\n                    xAxis:{\r\n                        enabled: LookUp(Chart.Options, key=\"x\").value <> \"false\",\r\n                        title: LookUp(Chart.Options, key=\"x.title\").value,\r\n                        titleStyle: {\r\n                            y:Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.y\").value,\"-10\")),3),\r\n                            align:If(LookUp(Chart.Options, key=\"x.title.align\").value = \"left\",\"left\",\"right\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.fontSize\").value,\"14\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"x.title.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.title.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.title.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"x.title.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"x.title.additionalStyles\").value\r\n                        },\r\n                        style: {\r\n                            height: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.height\").value,\"20\")),3),\r\n                            lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.lineWidth\").value,\"1\")),3),\r\n                            lineColor: Coalesce(LookUp(Chart.Options, key = \"x.lineColor\").value,\"#333333\"),\r\n                            tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickLength\").value,\"5\")),3),\r\n                            tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickWidth\").value,\"1\")),3)\r\n                        },\r\n                        labels: {\r\n                            enabled: LookUp(Chart.Options, key=\"x.labels\").value <> \"false\",\r\n                            format: LookUp(Chart.Options, key = \"x.labels.format\").value,\r\n                            rotation: Round(Value(LookUp(Chart.Options, key = \"x.labels.rotation\").value),3),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.labels.fontSize\").value,\"12\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"x.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"x.labels.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"x.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    yAxis:{\r\n                        enabled: LookUp(Chart.Options, key=\"y\").value <> \"false\",\r\n                        title: LookUp(Chart.Options, key=\"y.title\").value,\r\n                        titleStyle: {\r\n                            align:If(LookUp(Chart.Options, key=\"y.title.align\").value = \"left\",\"left\",\"right\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.title.fontSize\").value,\"14\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"y.title.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.title.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.title.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"y.title.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"y.title.additionalStyles\").value\r\n                        },\r\n                        align:Coalesce(LookUp(Chart.Options, key=\"y.align\").value,\"left\"),\r\n                        step:Round(Value(LookUp(Chart.Options, key = \"y.step\").value),3),\r\n                        min:Round(Value(LookUp(Chart.Options, key = \"y.min\").value),3),\r\n                        max:Round(Value(LookUp(Chart.Options, key = \"y.max\").value),3),\r\n                        style: {\r\n                            width: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.width\").value,\"50\")),3),\r\n                            lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.lineWidth\").value,\"1\")),3),\r\n                            lineColor: Coalesce(LookUp(Chart.Options, key = \"y.lineColor\").value,\"#333333\"),\r\n                            tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickLength\").value,\"5\")),3),\r\n                            tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickWidth\").value,\"1\")),3),\r\n                            padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.padTop\").value,\"20\")),3)\r\n                        },\r\n                        labels: {\r\n                            enabled: LookUp(Chart.Options, key=\"y.labels\").value <> \"false\",\r\n                            format: Coalesce(LookUp(Chart.Options, key = \"y.labels.format\").value,\"0\"),\r\n                            fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.labels.fontSize\").value,\"12\")),3),\r\n                            fontFamily: LookUp(Chart.Options, key = \"y.labels.fontFamily\").value,\r\n                            fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontWeight\").value,\"bold\"),\r\n                            fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontStyle\").value,\"normal\"),\r\n                            color: Coalesce(LookUp(Chart.Options, key=\"y.labels.color\").value,\"#333333\"),\r\n                            additionalStyles: LookUp(Chart.Options, key=\"y.labels.additionalStyles\").value\r\n                        }\r\n                    },\r\n                    stacked: LookUp(Chart.Options, key=\"bar.stacked\").value = \"true\",\r\n                    style:{\r\n                        itemGap:Round(Value(Coalesce(LookUp(Chart.Options, key = \"bar.itemGap\").value,\"5\")),3),\r\n                        fillOpacity:Round(Value(Coalesce(LookUp(Chart.Options, key = \"bar.fillOpacity\").value,\"1\")),3),\r\n                        borderWidth:Round(Value(LookUp(Chart.Options, key = \"bar.borderWidth\").value),3),\r\n                        borderColor:LookUp(Chart.Options, key = \"bar.borderColor\").value\r\n                    },\r\n                    labels:Chart.Data.labels,\r\n                    legends:If(Chart.Legend.source = \"labels\", Chart.Data.labels, Chart.Data.legends)\r\n                }),\r\n                    Concat(Table({\r\n                        data:ForAll(FirstN(indexes,CountRows(legends)),{\r\n                            index:index,\r\n                            color:Last(FirstN(colors,index)).color,\r\n                            values:ForAll(LookUp(Chart.Data.table, key=index & \".y\").values,{Value:Round(Value(Value),3)})\r\n                        }),\r\n                        plot:{\r\n                            x:If(yAxis.enabled && yAxis.align = \"left\",yAxis.style.width,0),\r\n                            y:If(yAxis.enabled, yAxis.style.padTop, 0),\r\n                            width:If(yAxis.enabled, Round(width - yAxis.style.width,3), width),\r\n                            height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)\r\n                        },\r\n                        xSpaces:CountRows(labels) + 1,\r\n                        seriesCount:If(stacked,1,CountRows(legends))\r\n                    }),\r\n                        Concat(AddColumns(Table({\r\n                            barWidth:Round(Min(plot.width / xSpaces / seriesCount - style.itemGap,plot.width / xSpaces / seriesCount),3),\r\n                            xSpaceWidth:Round((plot.width / xSpaces),3),\r\n                            labels:ForAll(FirstN(indexes,CountRows(labels)),{\r\n                                x:Round(index * (plot.width / xSpaces),3),\r\n                                labelText:Last(FirstN(labels,index)).Value\r\n                            }),\r\n                            data:ForAll(data,{\r\n                                id:index,\r\n                                color:color,\r\n                                values:ForAll(FirstN(indexes,CountRows(labels)),{\r\n                                    index:index,\r\n                                    value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)\r\n                                })\r\n                            }),\r\n                            min:If(yAxis.max <> yAxis.min,yAxis.min,stacked,0,RoundDown(Min(data,Min(values,Value)) - Max((Max(data,Max(values,Value)) - Min(data,Min(values,Value))) / 10,10),0)),\r\n                            max:If(yAxis.max <> yAxis.min,yAxis.max,stacked,Max(ForAll(RenameColumns(FirstN(indexes,CountRows(labels)),\"index\",\"i\"),{Value:Sum(data, Last(FirstN(values,i)).Value)}),Value),RoundUp(Max(data,Max(values,Value)),0)),\r\n                            tickX:Round(If(yAxis.align = \"left\", -yAxis.style.tickLength, yAxis.style.tickLength),3),\r\n                            labelX:Round(If(yAxis.align = \"left\",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),\r\n                            labelAnchor:If(yAxis.align = \"left\",\"end\",\"start\")\r\n                        }),\"step\",If(yAxis.step = 0,RoundUp((max - min) / 5,0),yAxis.step)),\r\n                        //X Axis\r\n                        \"<style>\" &\r\n                            \".x-labels{fill:\"& xAxis.labels.color &\";font-size:\" & xAxis.labels.fontSize & \"px;font-family:'\" & xAxis.labels.fontFamily & \"';font-weight:\" & xAxis.labels.fontWeight & \";font-style:\" & xAxis.labels.fontStyle & \";\" & xAxis.labels.additionalStyles & \"}\"&\r\n                            \".y-labels{fill:\"& yAxis.labels.color &\";font-size:\" & yAxis.labels.fontSize & \"px;font-family:'\" & yAxis.labels.fontFamily & \"';font-weight:\" & yAxis.labels.fontWeight & \";font-style:\" & yAxis.labels.fontStyle & \";\" & yAxis.labels.additionalStyles & \"}\"&\r\n                        \"</style>\" &\r\n                        If(xAxis.enabled,\"<g class='x-axis' transform='translate(\" & plot.x & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                            \"<path d='M0,0H\" & Round(plot.x + plot.width,3) & \"'  \"&\r\n                                \"fill='none' \" & \r\n                                \"stroke-width='\" & xAxis.style.lineWidth & \"' \" &\r\n                                \"stroke='\" & xAxis.style.lineColor & \"'/>\" &\r\n                            If(!IsBlank(xAxis.title), \"<text dy='0.35em' \" &\r\n                                \"text-anchor='\" & If(xAxis.titleStyle.align = \"left\",\"start\",\"end\") & \"' \" &\r\n                                \"x='\" & If(xAxis.titleStyle.align=\"left\",10,Round(width - yAxis.style.width - 10,3)) & \"' \" &\r\n                                \"y='\" & xAxis.titleStyle.y & \"' \" &\r\n                                \"style='\" &\r\n                                    \"fill:\" & xAxis.titleStyle.color & \";\" &\r\n                                    \"font-size:\" & xAxis.titleStyle.fontSize & \"px;\" &\r\n                                    \"font-family:\" & xAxis.titleStyle.fontFamily & \";\" &\r\n                                    \"font-weight:\" & xAxis.titleStyle.fontWeight & \";\" &\r\n                                    \"font-style:\" & xAxis.titleStyle.fontStyle & \";\" & xAxis.titleStyle.additionalStyles & \"'>\" &\r\n                                xAxis.title &\r\n                            \"</text>\") &\r\n                            \"<g>\" &\r\n                                Concat(labels,\r\n                                \"<g transform='translate(\" & x & \",0)'>\" &\r\n                                    \"<path d='M0,0V\" & xAxis.style.tickLength & \"' stroke-width='\" & xAxis.style.tickWidth & \"' stroke='\" & xAxis.style.lineColor & \"'/>\" &\r\n                                    If(xAxis.labels.enabled, \"<text transform='rotate(\" & xAxis.labels.rotation & \",0,5)' class='x-labels' dy='1em' y='5' text-anchor='\"& If(xAxis.labels.rotation > 0,\"start\",xAxis.labels.rotation < 0,\"end\", \"middle\") & \"' x='0'>\" &\r\n                                        labelText &\r\n                                    \"</text>\") &\r\n                                \"</g>\") &\r\n                            \"</g>\" &\r\n                        \"</g>\") &\r\n                        //Y Axis\r\n                        If(yAxis.enabled,\"<g class='y-axis' transform='translate(\" & If(yAxis.align = \"left\",0,Round(width - yAxis.style.width,3)) & \",0)'>\" &\r\n                            If(!IsBlank(yAxis.title), \"<text dy='.5em' \" &\r\n                                \"text-anchor='\" & If(yAxis.titleStyle.align = \"left\",\"end\",\"start\") & \"' \" &\r\n                                \"x='\" & Round(If(yAxis.align=\"left\",yAxis.style.width,0) + If(yAxis.titleStyle.align = \"left\",-10,10),3) & \"' \" &\r\n                                \"y='0' \" &\r\n                                \"style='\" &\r\n                                    \"fill:\" & yAxis.titleStyle.color & \";\" &\r\n                                    \"font-size:\" & yAxis.titleStyle.fontSize & \"px;\" &\r\n                                    \"font-family:\" & yAxis.titleStyle.fontFamily & \";\" &\r\n                                    \"font-weight:\" & yAxis.titleStyle.fontWeight & \";\" &\r\n                                    \"font-style:\" & yAxis.titleStyle.fontStyle & \";\" & yAxis.titleStyle.additionalStyles & \"'>\" &\r\n                                yAxis.title &\r\n                            \"</text>\") &\r\n                            \"<path transform='translate(\" & Round(If(yAxis.align = \"left\", yAxis.style.width, 0),3) & \",0)' d='M0,0L3,10L-3,10L0,0V\" & Round(plot.y + plot.height,3) & \"'  \"&\r\n                                \"fill='\" & yAxis.style.lineColor & \"' \" & \r\n                                \"stroke-width='\" & yAxis.style.lineWidth & \"' \" &\r\n                                \"stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                            \"<g>\" &\r\n                                \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                                    \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & yAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    If(yAxis.labels.enabled,\r\n                                    \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                        Text(min, yAxis.labels.format) &\r\n                                    \"</text>\") &\r\n                                \"</g>\" &\r\n                                Concat(ForAll(Filter(indexes, index <= RoundUp((max - min) / step,0)),{\r\n                                    y:Round(plot.y + (plot.height) * (1 - step * index / (max - min)),3),\r\n                                    label:Text(min + index * step, yAxis.labels.format)\r\n                                }),\r\n                                \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & y & \")'>\" &\r\n                                    \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & yAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                    If(yAxis.labels.enabled,\r\n                                    \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                        label &\r\n                                    \"</text>\") &\r\n                                \"</g>\") &\r\n                            \"</g>\" &\r\n                        \"</g>\") &\r\n                        \"<g transform='translate(\"&plot.x&\",\"&Round(plot.y+plot.height,3)&\")'>\" &\r\n                            Concat(Sort(ForAll(data,{\r\n                                id:id,\r\n                                color:color,\r\n                                borderColor:Coalesce(style.borderColor,color),\r\n                                points:AddColumns(values,\r\n                                    \"x\",Round(index * xSpaceWidth,3),\r\n                                    \"y\",Round(plot.height * (value - min) / (min - max),3),\r\n                                    \"baseY\",If(stacked,Round(plot.height * (Sum(Filter(RenameColumns(data,\"id\",\"tempId\"), tempId < id),Last(FirstN(values,index)).value)) / (min-max),3),0),\r\n                                    \"offsetX\",If(!stacked,Round((barWidth + style.itemGap) * (id - 1),3))\r\n                                )\r\n                            }),id,SortOrder.Descending),\r\n                                \"<g class='bar' transform='translate(\" & Round(-(xSpaceWidth - style.itemGap) / 2,3) & \",0)' \" &\r\n                                        \"fill='\" & color & \"' \" & \r\n                                        \"fill-opacity='\" & style.fillOpacity & \"'>\" &\r\n                                    Concat(points,\r\n                                        \"<path d='M\"& x + offsetX &\",\"& baseY &\r\n                                            \"V\"& baseY + y &\r\n                                            \"H\"& x + offsetX + barWidth &\r\n                                            \"V\"& baseY &\"' \" & \r\n                                        \"stroke='\" & borderColor & \"' \" & \r\n                                        \"stroke-width='\" & style.borderWidth & \"'/>\") &\r\n                                \"</g>\"\r\n                            ) &\r\n                        \"</g>\"\r\n                        )\r\n                    )\r\n                ),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Bar.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Bar.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Bar.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Bar.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Bar.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "7",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "572",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Radar",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 200,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Radar\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n                Concat(Table({\r\n                    x:0,\r\n                    y:0,\r\n                    minInput:Round(Value(LookUp(Chart.Options, key = \"y.min\").value),3),\r\n                    maxInput:Round(Value(LookUp(Chart.Options, key = \"y.max\").value),3),\r\n                    stepInput:Round(Value(LookUp(Chart.Options, key = \"y.step\").value),3),\r\n                    dataLabelsColor:Coalesce(LookUp(Chart.Options, key = \"y.labels.color\").value,\"#000000\"),\r\n                    labelsColor:Coalesce(LookUp(Chart.Options, key = \"radar.labelsColor\").value,\"#000000\"),\r\n                    lineWidth:Coalesce(LookUp(Chart.Options, key = \"radar.lineWidth\").value,\"1\"),\r\n                    plotLineColor:Coalesce(LookUp(Chart.Options, key = \"radar.plotLineColor\").value,\"#CCCCCC\"),\r\n                    plotLineWidth:Coalesce(LookUp(Chart.Options, key = \"radar.plotLineWidth\").value,\"0.5\"),\r\n                    backgroundEven:Coalesce(LookUp(Chart.Options, key = \"radar.backgroundEven\").value,\"#FAF4FB\"),\r\n                    backgroundOdd:Coalesce(LookUp(Chart.Options, key = \"radar.backgroundOdd\").value,\"#ffffff\"),\r\n                    labels:Chart.Data.labels,\r\n                    legends:If(Chart.Legend.source = \"labels\", Chart.Data.labels, Chart.Data.legends)\r\n                }),\r\n                Concat(Table({\r\n                    data:ForAll(FirstN(indexes,CountRows(legends)),{\r\n                        color:Last(FirstN(colors,index)).color,\r\n                        values:ForAll(LookUp(Chart.Data.table, key=index & \".y\").values,{Value:Round(Value(Value),3)})\r\n                    })\r\n                }),\r\n                    Concat(Table({\r\n                        data:ForAll(data,{\r\n                            color:color,\r\n                            values:ForAll(FirstN(indexes,CountRows(labels)),{\r\n                                Value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)\r\n                            })\r\n                        }),\r\n                        min:If(minInput = maxInput,RoundDown(Min(data,Min(values,Value)) - Max((Max(data,Max(values,Value)) - Min(data,Min(values,Value))) / 10,10),0),minInput),\r\n                        max:If(minInput = maxInput,RoundUp(Max(data,Max(values,Value)),0),maxInput)\r\n                    }),\r\n                        Concat(Table({\r\n                            circleCol: ForAll(FirstN(indexes,If(stepInput = 0,5,RoundUp((max - min) / stepInput,0))+1), {\r\n                                index: index - 1, \r\n                                value: Round(If(stepInput = 0, RoundUp((max - min) / 5,0),stepInput)*(index-1),0)\r\n                            })\r\n                        }),\r\n                        \"<g max='\" & max & \"' min='\" & min & \"'>\" &\r\n                            \"<g fill='#ffffff' fill-opacity='0' transform='translate(0,0)'>\" &\r\n                                \"<rect width='\"& width &\"' height='\"& height &\"'></rect>\" &\r\n                            \"</g>\" &\r\n                            \"<g transform='translate(\"& width/2 &\",\"& height/2 &\")'>\" &\r\n                                \"<g class='backgroud'>\" & Concat(circleCol, If(index=0, \r\n                                    \"\",\r\n                                    \"<circle cx='0' cy='0' r='\"& (height/2 - 47)/(CountRows(circleCol)-1) * (CountRows(circleCol) - index)  &\"' fill='\"& If(Mod(index, 2) = 1, backgroundOdd, backgroundEven) &\"' stroke-width='\" & plotLineWidth & \"' stroke='\" & plotLineColor & \"' />\")) &\r\n                                \"</g>\" &\r\n                                \"<g class='value-axis'>\" & Concat(circleCol,\r\n                                    \"<text x='0' y='0' fill='\" & dataLabelsColor & \"' text-anchor='middle' dy='\"& 5.5 + -1 * index*((height/2 - 47)/(CountRows(circleCol)-1)) &\"'>\"& value &\"</text>\") &\r\n                                \"</g>\" &\r\n                                \"<g class='category-axis' stroke-width='\" & plotLineWidth & \"' stroke='\" & plotLineColor & \"' fill='none'>\" & Concat(FirstN(indexes,CountRows(labels)),\r\n                                    \"<path d='M0,0  L\"& Round((height/2 - 47) * Sin((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180), 2)  &\",\"& Round((height/2 - 47) * Cos((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180),2) &\" ' />\") &\r\n                                \"</g>\" &\r\n                                \"<g class='category-text'>\" & Concat(FirstN(indexes,CountRows(labels)),\r\n                                    \"<g transform='translate(\"& Round((height/2 - 23.5) * Sin((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180), 2) &\",\"& Round((height/2 - 23.5) * Cos((180 + 360/CountRows(labels)*(index-1)) * Pi() / 180), 2) &\")'>\" &\r\n                                        \"<text fill='\" & labelsColor & \"' text-anchor='\"& If(360/CountRows(labels)*(index-1) <= 30, \"middle\", 360/CountRows(labels)*(index-1) <= 150, \"end\", 360/CountRows(labels)*(index-1) <= 210, \"middle\", 360/CountRows(labels)*(index-1) <= 340, \"start\", 360/CountRows(labels)*(index-1) <= 360, \"middle\") &\"'>\" &  \r\n                                            Last(FirstN(labels, index)).Value & \r\n                                        \"</text>\" &\r\n                                    \"</g>\") &\r\n                                \"</g>\" &\r\n                                \"<g class='value' fill='none' stroke-width='\" & lineWidth & \"'>\" &\r\n                                    Concat(data,\r\n                                    \"<path stroke='\" & color & \"' d='\" & \r\n                                        Concat(FirstN(indexes,CountRows(labels)), \r\n                                            If(index-1=0, \r\n                                                \"M\" & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Sin((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2) & \",\" & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Cos((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2),  \r\n                                                \"L\" & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Sin((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2) & \",\" & Round(Last(FirstN(values, index)).Value * (height/2 - 47)/max * Cos((180 + 360/CountRows(values)*(index-1)) * Pi() / 180), 2)\r\n                                            )\r\n                                        ) & \" z'/>\") &\r\n                                \"</g>\" &\r\n                            \"</g>\" &\r\n                        \"</g>\")\r\n                    )\r\n                )\r\n            ),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Radar.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Radar.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Radar.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Radar.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Radar.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "8",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "40",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "573",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Line",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 201,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Type = \"Line\", Concat(\r\n    Table({\r\n        width: PlotArea.Width,\r\n        height: PlotArea.Height,\r\n        colors:RenameColumns(Chart.Colors,\"Value\",\"color\"),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }), \r\n     Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & width & \" \" & height & \"'>\",\r\n            Concat(Table({\r\n                xAxis:{\r\n                    enabled: LookUp(Chart.Options, key=\"x\").value <> \"false\",\r\n                    title: LookUp(Chart.Options, key=\"x.title\").value,\r\n                    titleStyle: {\r\n                        y:Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.y\").value,\"-10\")),3),\r\n                        align:If(LookUp(Chart.Options, key=\"x.title.align\").value = \"left\",\"left\",\"right\"),\r\n                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.title.fontSize\").value,\"14\")),3),\r\n                        fontFamily: LookUp(Chart.Options, key = \"x.title.fontFamily\").value,\r\n                        fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.title.fontWeight\").value,\"bold\"),\r\n                        fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.title.fontStyle\").value,\"normal\"),\r\n                        color: Coalesce(LookUp(Chart.Options, key=\"x.title.color\").value,\"#333333\"),\r\n                        additionalStyles: LookUp(Chart.Options, key=\"x.title.additionalStyles\").value\r\n                    },\r\n                    style: {\r\n                        height: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.height\").value,\"20\")),3),\r\n                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.lineWidth\").value,\"1\")),3),\r\n                        lineColor: Coalesce(LookUp(Chart.Options, key = \"x.lineColor\").value,\"#333333\"),\r\n                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickLength\").value,\"5\")),3),\r\n                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.tickWidth\").value,\"1\")),3)\r\n                    },\r\n                    labels: {\r\n                        enabled: LookUp(Chart.Options, key=\"x.labels\").value <> \"false\",\r\n                        format: LookUp(Chart.Options, key = \"x.labels.format\").value,\r\n                        rotation: Round(Value(LookUp(Chart.Options, key = \"x.labels.rotation\").value),3),\r\n                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"x.labels.fontSize\").value,\"12\")),3),\r\n                        fontFamily: LookUp(Chart.Options, key = \"x.labels.fontFamily\").value,\r\n                        fontWeight: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontWeight\").value,\"bold\"),\r\n                        fontStyle: Coalesce(LookUp(Chart.Options, key=\"x.labels.fontStyle\").value,\"normal\"),\r\n                        color: Coalesce(LookUp(Chart.Options, key=\"x.labels.color\").value,\"#333333\"),\r\n                        additionalStyles: LookUp(Chart.Options, key=\"x.labels.additionalStyles\").value\r\n                    }\r\n                },\r\n                yAxis:{\r\n                    enabled: LookUp(Chart.Options, key=\"y\").value <> \"false\",\r\n                    title: LookUp(Chart.Options, key=\"y.title\").value,\r\n                    titleStyle: {\r\n                        align:If(LookUp(Chart.Options, key=\"y.title.align\").value = \"left\",\"left\",\"right\"),\r\n                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.title.fontSize\").value,\"14\")),3),\r\n                        fontFamily: LookUp(Chart.Options, key = \"y.title.fontFamily\").value,\r\n                        fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.title.fontWeight\").value,\"bold\"),\r\n                        fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.title.fontStyle\").value,\"normal\"),\r\n                        color: Coalesce(LookUp(Chart.Options, key=\"y.title.color\").value,\"#333333\"),\r\n                        additionalStyles: LookUp(Chart.Options, key=\"y.title.additionalStyles\").value\r\n                    },\r\n                    align:Coalesce(LookUp(Chart.Options, key=\"y.align\").value,\"left\"),\r\n                    step:Round(Value(LookUp(Chart.Options, key = \"y.step\").value),3),\r\n                    min:Round(Value(LookUp(Chart.Options, key = \"y.min\").value),3),\r\n                    max:Round(Value(LookUp(Chart.Options, key = \"y.max\").value),3),\r\n                    style: {\r\n                        width: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.width\").value,\"50\")),3),\r\n                        lineWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.lineWidth\").value,\"1\")),3),\r\n                        lineColor: Coalesce(LookUp(Chart.Options, key = \"y.lineColor\").value,\"#333333\"),\r\n                        tickLength: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickLength\").value,\"5\")),3),\r\n                        tickWidth: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.tickWidth\").value,\"1\")),3),\r\n                        padTop:Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.padTop\").value,\"20\")),3)\r\n                    },\r\n                    labels: {\r\n                        enabled: LookUp(Chart.Options, key=\"y.labels\").value <> \"false\",\r\n                        format: Coalesce(LookUp(Chart.Options, key = \"y.labels.format\").value,\"0\"),\r\n                        fontSize: Round(Value(Coalesce(LookUp(Chart.Options, key = \"y.labels.fontSize\").value,\"12\")),3),\r\n                        fontFamily: LookUp(Chart.Options, key = \"y.labels.fontFamily\").value,\r\n                        fontWeight: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontWeight\").value,\"bold\"),\r\n                        fontStyle: Coalesce(LookUp(Chart.Options, key=\"y.labels.fontStyle\").value,\"normal\"),\r\n                        color: Coalesce(LookUp(Chart.Options, key=\"y.labels.color\").value,\"#333333\"),\r\n                        additionalStyles: LookUp(Chart.Options, key=\"y.labels.additionalStyles\").value\r\n                    }\r\n                },\r\n                stacked: LookUp(Chart.Options, key=\"line.stacked\").value = \"true\",\r\n                style:{\r\n                    lineWidth:Round(Value(Coalesce(LookUp(Chart.Options, key = \"line.lineWidth\").value,\"2\")),3),\r\n                    fillOpacity:Round(Value(LookUp(Chart.Options, key = \"line.fillOpacity\").value),3),\r\n                    markerSize:Round(Value(Coalesce(LookUp(Chart.Options, key = \"line.markerSize\").value,\"16\")),3),\r\n                    marker:Coalesce(LookUp(Chart.Options, key = \"line.marker\").value,\"circle\")\r\n                },\r\n                labels:Chart.Data.labels,\r\n                legends:If(Chart.Legend.source = \"labels\", Chart.Data.labels, Chart.Data.legends)\r\n            }),\r\n                Concat(Table({\r\n                    data:ForAll(FirstN(indexes,CountRows(legends)),{\r\n                        index:index,\r\n                        color:Last(FirstN(colors,index)).color,\r\n                        values:ForAll(LookUp(Chart.Data.table, key=index & \".y\").values,{Value:Round(Value(Value),3)})\r\n                    }),\r\n                    labels:ForAll(FirstN(indexes,CountRows(labels)),{\r\n                        x:Round(index * ((width - If(yAxis.enabled,yAxis.style.width)) / (CountRows(labels) + 1)),3),\r\n                        labelText:Last(FirstN(labels,index)).Value\r\n                    }),\r\n                    plot:{\r\n                        x:If(yAxis.enabled && yAxis.align = \"left\",yAxis.style.width,0),\r\n                        y:If(yAxis.enabled, yAxis.style.padTop, 0),\r\n                        width:If(yAxis.enabled, Round(width - yAxis.style.width,3), width),\r\n                        height:Round(height - If(xAxis.enabled,xAxis.style.height,0) - If(yAxis.enabled,yAxis.style.padTop,0),3)\r\n                    }\r\n                }),\r\n                    Concat(AddColumns(Table({\r\n                        data:ForAll(data,{\r\n                            id:index,\r\n                            color:color,\r\n                            values:ForAll(FirstN(indexes,CountRows(labels)),{\r\n                                index:index,\r\n                                value:If(CountRows(values) < index, 0, Last(FirstN(values,index)).Value)\r\n                            })\r\n                        }),\r\n                        min:If(yAxis.max <> yAxis.min,yAxis.min,stacked,0,RoundDown(Min(data,Min(values,Value)) - Max((Max(data,Max(values,Value)) - Min(data,Min(values,Value))) / 10,10),0)),\r\n                        max:If(yAxis.max <> yAxis.min,yAxis.max,stacked,Max(ForAll(RenameColumns(FirstN(indexes,CountRows(labels)),\"index\",\"i\"),{Value:Sum(data, Last(FirstN(values,i)).Value)}),Value),RoundUp(Max(data,Max(values,Value)),0)),\r\n                        tickX:Round(If(yAxis.align = \"left\", -yAxis.style.tickLength, yAxis.style.tickLength),3),\r\n                        labelX:Round(If(yAxis.align = \"left\",-yAxis.style.tickLength-5,yAxis.style.tickLength + 5),3),\r\n                        labelAnchor:If(yAxis.align = \"left\",\"end\",\"start\")\r\n                    }),\"step\",If(yAxis.step = 0,RoundUp((max - min) / 5,0),yAxis.step)),\r\n                    //X Axis\r\n                    \"<style>\" &\r\n                        \".x-labels{fill:\"& xAxis.labels.color &\";font-size:\" & xAxis.labels.fontSize & \"px;font-family:'\" & xAxis.labels.fontFamily & \"';font-weight:\" & xAxis.labels.fontWeight & \";font-style:\" & xAxis.labels.fontStyle & \";\" & xAxis.labels.additionalStyles & \"}\"&\r\n                        \".y-labels{fill:\"& yAxis.labels.color &\";font-size:\" & yAxis.labels.fontSize & \"px;font-family:'\" & yAxis.labels.fontFamily & \"';font-weight:\" & yAxis.labels.fontWeight & \";font-style:\" & yAxis.labels.fontStyle & \";\" & yAxis.labels.additionalStyles & \"}\"&\r\n                    \"</style>\" &\r\n                    If(xAxis.enabled,\"<g class='x-axis' transform='translate(\" & plot.x & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                        \"<path d='M0,0H\" & Round(plot.x + plot.width,3) & \"'  \"&\r\n                            \"fill='none' \" & \r\n                            \"stroke-width='\" & xAxis.style.lineWidth & \"' \" &\r\n                            \"stroke='\" & xAxis.style.lineColor & \"'/>\" &\r\n                        If(!IsBlank(xAxis.title), \"<text dy='0.35em' \" &\r\n                            \"text-anchor='\" & If(xAxis.titleStyle.align = \"left\",\"start\",\"end\") & \"' \" &\r\n                            \"x='\" & If(xAxis.titleStyle.align=\"left\",10,Round(width - yAxis.style.width - 10,3)) & \"' \" &\r\n                            \"y='\" & xAxis.titleStyle.y & \"' \" &\r\n                            \"style='\" &\r\n                                \"fill:\" & xAxis.titleStyle.color & \";\" &\r\n                                \"font-size:\" & xAxis.titleStyle.fontSize & \"px;\" &\r\n                                \"font-family:\" & xAxis.titleStyle.fontFamily & \";\" &\r\n                                \"font-weight:\" & xAxis.titleStyle.fontWeight & \";\" &\r\n                                \"font-style:\" & xAxis.titleStyle.fontStyle & \";\" & xAxis.titleStyle.additionalStyles & \"'>\" &\r\n                            xAxis.title &\r\n                        \"</text>\") &\r\n                        \"<g>\" &\r\n                            Concat(labels,\r\n                            \"<g transform='translate(\" & x & \",0)'>\" &\r\n                                \"<path d='M0,0V\" & xAxis.style.tickLength & \"' stroke-width='\" & xAxis.style.tickWidth & \"' stroke='\" & xAxis.style.lineColor & \"'/>\" &\r\n                                If(xAxis.labels.enabled, \"<text transform='rotate(\" & xAxis.labels.rotation & \",0,5)' class='x-labels' dy='1em' y='5' text-anchor='\"& If(xAxis.labels.rotation > 0,\"start\",xAxis.labels.rotation < 0,\"end\", \"middle\") & \"' x='0'>\" &\r\n                                    labelText &\r\n                                \"</text>\") &\r\n                            \"</g>\") &\r\n                        \"</g>\" &\r\n                    \"</g>\") &\r\n                    //Y Axis\r\n                    If(yAxis.enabled,\"<g class='y-axis' transform='translate(\" & If(yAxis.align = \"left\",0,Round(width - yAxis.style.width,3)) & \",0)'>\" &\r\n                        If(!IsBlank(yAxis.title), \"<text dy='.5em' \" &\r\n                            \"text-anchor='\" & If(yAxis.titleStyle.align = \"left\",\"end\",\"start\") & \"' \" &\r\n                            \"x='\" & Round(If(yAxis.align=\"left\",yAxis.style.width,0) + If(yAxis.titleStyle.align = \"left\",-10,10),3) & \"' \" &\r\n                            \"y='0' \" &\r\n                            \"style='\" &\r\n                                \"fill:\" & yAxis.titleStyle.color & \";\" &\r\n                                \"font-size:\" & yAxis.titleStyle.fontSize & \"px;\" &\r\n                                \"font-family:\" & yAxis.titleStyle.fontFamily & \";\" &\r\n                                \"font-weight:\" & yAxis.titleStyle.fontWeight & \";\" &\r\n                                \"font-style:\" & yAxis.titleStyle.fontStyle & \";\" & yAxis.titleStyle.additionalStyles & \"'>\" &\r\n                            yAxis.title &\r\n                        \"</text>\") &\r\n                        \"<path transform='translate(\" & Round(If(yAxis.align = \"left\", yAxis.style.width, 0),3) & \",0)' d='M0,0L3,10L-3,10L0,0V\" & Round(plot.y + plot.height,3) & \"'  \"&\r\n                            \"fill='\" & yAxis.style.lineColor & \"' \" & \r\n                            \"stroke-width='\" & yAxis.style.lineWidth & \"' \" &\r\n                            \"stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                        \"<g>\" &\r\n                            \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & Round(plot.y + plot.height,3) & \")'>\" &\r\n                                \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & yAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                If(yAxis.labels.enabled,\r\n                                \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                    Text(min, yAxis.labels.format) &\r\n                                \"</text>\") &\r\n                            \"</g>\" &\r\n                            Concat(ForAll(Filter(indexes, index <= RoundUp((max - min) / step,0)),{\r\n                                y:Round(plot.y + (plot.height) * (1 - step * index / (max - min)),3),\r\n                                label:Text(min + index * step, yAxis.labels.format)\r\n                            }),\r\n                            \"<g transform='translate(\" & If(yAxis.align = \"left\", yAxis.style.width, 0) & \",\" & y & \")'>\" &\r\n                                \"<path d='M0,0H\" & tickX & \"' stroke-width='\" & yAxis.style.tickWidth & \"' stroke='\" & yAxis.style.lineColor & \"'/>\" &\r\n                                If(yAxis.labels.enabled,\r\n                                \"<text class='y-labels' dy='.5em' y='-5' text-anchor='\"& labelAnchor & \"' x='\"& labelX & \"'>\" &\r\n                                    label &\r\n                                \"</text>\") &\r\n                            \"</g>\") &\r\n                        \"</g>\" &\r\n                    \"</g>\") &\r\n                    \"<g transform='translate(\"&plot.x&\",\"&Round(plot.y+plot.height,3)&\")'>\" &\r\n                        Concat(Sort(ForAll(data,{\r\n                            id:id,\r\n                            color:color,\r\n                            points:AddColumns(values,\r\n                                \"x\",Round(index * (plot.width / (CountRows(labels) + 1)),3),\r\n                                \"y\",Round(plot.height * (value - min) / (min - max),3),\r\n                                \"baseY\",If(stacked,Round(plot.height * (Sum(Filter(RenameColumns(data,\"id\",\"tempId\"), tempId < id),Last(FirstN(values,index)).value)) / (min-max),3),0)\r\n                            )\r\n                        }),id,SortOrder.Descending),\r\n                            \"<g class='line'>\" &\r\n                                \"<path d='M\" & First(points).x & \",\" & First(points).baseY & Concat(points,\"L\" & x & \",\" & baseY + y) & Concat(Sort(points,index,SortOrder.Descending), \"L\" & x & \",\" & baseY) & \"Z' \" &\r\n                                    \"stroke='none' \" &\r\n                                    \"fill='\" & color & \"' \" &\r\n                                    \"fill-opacity='\" & style.fillOpacity & \"'/>\" &\r\n                                \"<path d='M\" & Concat(points, x & \",\" & baseY + y,\"L\") & \"' \" &\r\n                                    \"fill='none' \" &\r\n                                    \"stroke='\" & color & \"' \" &\r\n                                    \"stroke-width='\" & style.lineWidth & \"'/>\" &\r\n                                Concat(points,\r\n                                    Switch(style.marker,\r\n                                    \"circle\",\r\n                                        \"<circle cx='\" & x & \"' \" &\r\n                                            \"cy='\" & baseY + y & \"' \" &\r\n                                            \"r='\" & Round(style.markerSize / 2,3) & \"' \" &\r\n                                            \"fill='\" & color & \"'/>\"\r\n                                    )\r\n                                ) &\r\n                            \"</g>\"\r\n                        ) &\r\n                    \"</g>\"\r\n                    )\r\n                )\r\n            ),\r\n            \"</svg>\"\r\n        ),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n))",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Y",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.X",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Width",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.Height",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Line.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Line.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Line.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Line.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Line.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "9",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "0",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "54",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "100",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "574",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "PlotArea",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 202,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Round(Header_1.Height + If(Chart.Legend.enabled && Chart.Legend.placement = \"top\", Chart.Legend.height, 0), 3)",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Round(If(Chart.Legend.enabled && Chart.Legend.placement = \"left\", Chart.Legend.width,0),3)",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(PlotArea.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Round(Chart.Width - If(Chart.Legend.enabled && (Chart.Legend.placement = \"left\" || Chart.Legend.placement = \"right\"),Chart.Legend.width,0),3)",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Round(If(IsBlank(Chart.Title.text), Chart.Height, Chart.Height - Header_1.Height) - If(Chart.Legend.enabled && (Chart.Legend.placement = \"top\" || Chart.Legend.placement = \"bottom\"),Chart.Legend.height,0),3)",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(PlotArea.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "PlotArea.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(PlotArea.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(PlotArea.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "10",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      },
      {
        "AllowAccessToGlobals": true,
        "Children": [],
        "ControlPropertyState": [
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "SampleImage",
            "InvariantPropertyName": "Image",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "ImagePosition",
          "ImageRotation",
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "0",
            "InvariantPropertyName": "X",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "209",
            "InvariantPropertyName": "Y",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "500",
            "InvariantPropertyName": "Width",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          {
            "AFDDataSourceName": "",
            "AutoRuleBindingEnabled": false,
            "AutoRuleBindingString": "108",
            "InvariantPropertyName": "Height",
            "IsLockable": false,
            "NameMapSourceSchema": "?"
          },
          "Fill",
          "DisabledFill",
          "PressedFill",
          "HoverFill",
          "BorderColor",
          "DisabledBorderColor",
          "PressedBorderColor",
          "HoverBorderColor",
          "FocusedBorderColor",
          "BorderStyle",
          "DisplayMode",
          "ZIndex",
          "RadiusTopLeft",
          "RadiusTopRight",
          "RadiusBottomLeft",
          "RadiusBottomRight",
          "BorderThickness",
          "FocusedBorderThickness",
          "PaddingTop",
          "PaddingRight",
          "PaddingBottom",
          "PaddingLeft",
          "ContentLanguage"
        ],
        "ControlUniqueId": "575",
        "HasDynamicProperties": false,
        "Index": 0,
        "IsAutoGenerated": false,
        "IsDataControl": false,
        "IsFromScreenLayout": false,
        "IsGroupControl": false,
        "IsLocked": false,
        "LayoutName": "",
        "MetaDataIDKey": "",
        "Name": "Legend",
        "OptimizeForDevices": "Off",
        "Parent": "Chart",
        "PersistMetaDataIDKey": false,
        "PublishOrderIndex": 203,
        "Rules": [
          {
            "Category": "Data",
            "InvariantScript": "If(Chart.Legend.enabled, Concat(\r\n    Table({\r\n        items: If(Chart.Legend.source = \"labels\", Chart.Data.labels, Chart.Data.legends),\r\n        indexes: ForAll(\r\n            ForAll(Split(\r\n                Concat(\r\n                    Table({ \r\n                        indexes: ForAll(\r\n                            ForAll(Split(Coalesce(LookUp(Parent.Options, key=\"indexes\").value, \"1,2,3,4,5,6,7,8,9,10\"), \",\"), {Result: ThisRecord.Value}),\r\n                            Value(Result)\r\n                        )\r\n                    }),\r\n                    Concat(\r\n                        RenameColumns(indexes, \"Value\",\"baseIndex\"), \r\n                        Concat(indexes, Text((baseIndex - 1) * CountRows(indexes) + Value), \",\"),\r\n                        \",\"\r\n                    )\r\n                ), \",\"), {Result: ThisRecord.Value}),\r\n            { index: Value(Result) }\r\n        ) //1, 2, 3, 4, ..., 99, 100\r\n    }),\r\n    Substitute(Substitute(Substitute(Substitute(Substitute(Substitute(\r\n        Concatenate(\r\n            \"data:image/svg+xml;charset=utf8,\", \r\n            \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \" & Legend.Width & \" \" & Legend.Height & \"'>\",\r\n            \"<g>\",\r\n                \"<style>\",\r\n                    \".legend{padding:5px;color:\" & Chart.Legend.color & \";text-align:\" & Chart.Legend.align & \";font-family:\" & Chart.Legend.fontFamily & \";font-size:\" & Chart.Legend.fontSize & \"px;font-weight:\" & Chart.Legend.fontWeight & \";font-style:\" & Chart.Legend.fontStyle & \";}\",\r\n                    \".legend>span{display:inline-block;margin-right:\" & Chart.Legend.itemGap & \"px;}\",\r\n                    \".legend>span>i{display:inline-block;width:1em;height:1em;background-color:silver;margin-right:5px;vertical-align:middle;border:1px solid white;border-radius:20%;}\",\r\n                    \".legend>span>span{vertical-align: middle;}\",\r\n                    \".legend.legend-aside>span{display:block;margin-bottom:\" & Chart.Legend.itemGap & \"px;}\",\r\n                \"</style>\",\r\n                \"<foreignObject x='0' y='0' width='100%' height='100%'>\",\r\n                    \"<div xmlns='http://www.w3.org/1999/xhtml' class='legend \" & If(Chart.Legend.placement = \"left\" || Chart.Legend.placement = \"right\", \"legend-aside\", \"\") & \"'>\",\r\n                        Concat(\r\n                            ForAll(\r\n                                FirstN(indexes, CountRows(items)),\r\n                                {\r\n                                    color:Last(FirstN(Chart.Colors, index)).Value,\r\n                                    text:Last(FirstN(items, index)).Value\r\n                                }),\r\n                            Concatenate(\r\n                                \"<span xmlns='http://www.w3.org/1999/xhtml'>\",\r\n                                    \"<i xmlns='http://www.w3.org/1999/xhtml' style='background-color:\" & color & \";'></i>\",\r\n                                    \"<span xmlns='http://www.w3.org/1999/xhtml'>\" & text & \"</span>\",\r\n                                \"</span>\")\r\n                        ),\r\n                    \"</div>\",\r\n                \"</foreignObject>\",\r\n            \"</g>\",\r\n        \"</svg>\"),\r\n        \"%\", \"%25\"), \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"{\", \"%7B\"), \"}\", \"%7D\")\r\n    )\r\n)",
            "Property": "Image",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Data",
            "InvariantScript": "\"\"",
            "Property": "ContentLanguage",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "BorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusBottomLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "RadiusTopLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "1",
            "Property": "ZIndex",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "DisplayMode.Edit",
            "Property": "DisplayMode",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "BorderStyle.Solid",
            "Property": "BorderStyle",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(166, 166, 166, 1)",
            "Property": "DisabledBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingLeft",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingBottom",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 18, 107, 1)",
            "Property": "BorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(244, 244, 244, 1)",
            "Property": "DisabledFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingRight",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "0",
            "Property": "PaddingTop",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "2",
            "Property": "FocusedBorderThickness",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "RGBA(0, 0, 0, 0)",
            "Property": "Fill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "If(Chart.Legend.placement = \"top\" || Chart.Legend.placement = \"bottom\", Chart.Legend.height, Chart.Height)",
            "Property": "Height",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "If(Chart.Legend.placement = \"top\" || Chart.Legend.placement = \"bottom\", Chart.Width, Chart.Legend.width)",
            "Property": "Width",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "If(Chart.Legend.placement = \"bottom\", Round(Chart.Height - Chart.Legend.height ,3), Header_1.Height)",
            "Property": "Y",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": " If(Chart.Legend.placement = \"right\", Round(Chart.Width - Chart.Legend.width, 3), 0)",
            "Property": "X",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImageRotation.None",
            "Property": "ImageRotation",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ImagePosition.Fit",
            "Property": "ImagePosition",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "Legend.BorderColor",
            "Property": "FocusedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Legend.BorderColor, 20%)",
            "Property": "HoverBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Legend.BorderColor, -20%)",
            "Property": "PressedBorderColor",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Legend.Fill, 20%)",
            "Property": "HoverFill",
            "RuleProviderType": "Unknown"
          },
          {
            "Category": "Design",
            "InvariantScript": "ColorFade(Legend.Fill, -20%)",
            "Property": "PressedFill",
            "RuleProviderType": "Unknown"
          }
        ],
        "StyleName": "defaultImageStyle",
        "Template": {
          "CustomGroupControlTemplateName": "",
          "FirstParty": true,
          "Id": "http://microsoft.com/appmagic/image",
          "IsComponentDefinition": false,
          "IsCustomGroupControlTemplate": false,
          "IsPremiumPcfControl": false,
          "LastModifiedTimestamp": "0",
          "Name": "image",
          "OverridableProperties": {},
          "Version": "2.2.2"
        },
        "Type": "ControlInfo",
        "VariantName": ""
      }
    ],
    "ControlPropertyState": [
      "Fill",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "Height",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "Width",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "X",
      "Y",
      "ZIndex",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\"Text\"",
        "InvariantPropertyName": "Type",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "Subtitle",
      "Title",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "{\n    enabled: true,\n    source: \"Labels\",\n    placement: \"bottom\",\n    width: 100,\n    height: 45,\n    itemGap: 5,\n    fontSize: 14,\n    fontFamily: \"\",\n    fontWeight: \"bold\",\n    fontStyle: \"normal\",\n    color: \"#666666\",\n    align: \"center\"\n}",
        "InvariantPropertyName": "Legend",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "Data",
      "Colors",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "Table(\r\n                {key:\"\",value:\"\"},\r\n                {key:\"title\", value:\"Test Title 1\"},\r\n                {key:\"legend\", value:\"true\"},\r\n                {key:\"legend.source\", value:\"values\"},\r\n                {key:\"pie.innerRadius\", value:\"0.8\"}\r\n            )",
        "InvariantPropertyName": "Options",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "OnReset"
    ],
    "LastModifiedTimestamp": "638381146836211793",
    "Name": "Chart",
    "Rules": [
      {
        "Category": "Data",
        "InvariantScript": "\"Pie\"",
        "Property": "Type",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "{\n    text: \"Subtitle\",\n    height: 12,\n    align: \"center\",\n    paddingTop: 12,\n    fontSize: 12,\n    fontFamily: \"\",\n    fontWeight: \"bold\",\n    fontStyle: \"normal\",\n    color: \"#808080\",\n    additionalStyles: \"\"\n}",
        "Property": "Subtitle",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "{\n    text: \"Title\",\n    height: 20,\n    align: \"center\",\n    paddingTop: 10,\n    fontSize: 20,\n    fontFamily: \"\",\n    fontWeight: \"bold\",\n    fontStyle: \"normal\",\n    color: \"#666666\",\n    additionalStyles: \"\"\n}",
        "Property": "Title",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "{\n    enabled: true,\n    source: \"labels\",\n    placement: \"bottom\",\n    width: 100,\n    height: 45,\n    itemGap: 5,\n    fontSize: 14,\n    fontFamily: \"\",\n    fontWeight: \"bold\",\n    fontStyle: \"normal\",\n    color: \"#666666\",\n    align: \"center\"\n}",
        "Property": "Legend",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "{\r\n    legends: [\"Test 1\", \"Test 1\"],\r\n    labels: [\"Label 1\",\"Label 2\",\"Label 3\",\"Label 4\",\"Label 5\"],\r\n    table: Table(\r\n        {key:\"values\", values:[90, 20, 40, 80, 50]}\r\n    )\r\n}",
        "Property": "Data",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "[\"#31825d\", \"#30a667\", \"#5ec16c\", \"#f6c790\", \"#f7c772\", \"#f7b45b\", \"#f68f64\", \"#d46068\", \"#946eb0\", \"#769acc\", \"#60c5ea\"]",
        "Property": "Colors",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "Table(\r\n    {key:\"\",value:\"\"},{key:\"pie.dataLabels\", value:\"true\"}\r\n)",
        "Property": "Options",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "1",
        "Property": "ZIndex",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "Y",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "X",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "500",
        "Property": "Width",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "500",
        "Property": "Height",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "RGBA(0, 0, 0, 0)",
        "Property": "Fill",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "",
        "Property": "OnReset",
        "RuleProviderType": "System"
      }
    ]
  },
  "ComponentManifest": {
    "AllowAccessToGlobals": false,
    "AllowCustomization": true,
    "Description": "",
    "Name": "Chart",
    "TemplateGuid": "11eb2bdcb8cc446f936b6a174302ce25"
  },
  "ComponentType": "CanvasComponent",
  "CustomGroupControlTemplateName": "",
  "CustomProperties": [
    {
      "Category": 0,
      "DisplayName": "Type",
      "Hidden": false,
      "Name": "Type",
      "PropertyDataTypeKey": "String",
      "Tooltip": "Type of the chart",
      "Type": "{\"Version\":\"1.336\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 0,
      "DisplayName": "Colors",
      "Hidden": false,
      "Name": "Colors",
      "PropertyDataTypeKey": "Table",
      "Tooltip": "Colors",
      "Type": "{\"Version\":\"1.336\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Table\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"Value\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}]}}"
    },
    {
      "Category": 0,
      "DisplayName": "Title",
      "Hidden": false,
      "Name": "Title",
      "PropertyDataTypeKey": "Record",
      "Tooltip": "Title",
      "Type": "{\"Version\":\"1.336\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Record\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"additionalStyles\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"align\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"color\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontFamily\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontSize\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontStyle\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontWeight\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"height\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"paddingTop\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"text\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}]}}"
    },
    {
      "Category": 0,
      "DisplayName": "Subtitle",
      "Hidden": false,
      "Name": "Subtitle",
      "PropertyDataTypeKey": "Record",
      "Tooltip": "Subtitle",
      "Type": "{\"Version\":\"1.336\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Record\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"additionalStyles\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"align\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"color\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontFamily\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontSize\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontStyle\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontWeight\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"height\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"paddingTop\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"text\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}]}}"
    },
    {
      "Category": 0,
      "DisplayName": "Legend",
      "Hidden": false,
      "Name": "Legend",
      "PropertyDataTypeKey": "Record",
      "Tooltip": "Legend",
      "Type": "{\"Version\":\"1.336\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Record\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"align\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"color\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"enabled\",\"Kind\":\"Boolean\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontFamily\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontSize\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontStyle\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"fontWeight\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"height\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"itemGap\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"placement\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"source\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"width\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}]}}"
    },
    {
      "Category": 0,
      "DisplayName": "Options",
      "Hidden": false,
      "Name": "Options",
      "PropertyDataTypeKey": "Table",
      "Tooltip": "Options",
      "Type": "{\"Version\":\"1.336\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Table\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"key\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"value\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}]}}"
    },
    {
      "Category": 0,
      "DisplayName": "Data",
      "Hidden": false,
      "Name": "Data",
      "PropertyDataTypeKey": "Record",
      "Tooltip": "Data",
      "Type": "{\"Version\":\"1.336\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Record\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"labels\",\"Kind\":\"Table\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"Value\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}]},{\"Name\":\"legends\",\"Kind\":\"Table\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"Value\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}]},{\"Name\":\"table\",\"Kind\":\"Table\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"key\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]},{\"Name\":\"values\",\"Kind\":\"Table\",\"EnumString\":\"\",\"Type\":[{\"Name\":\"Value\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}]}]}]}}"
    }
  ],
  "FirstParty": true,
  "Id": "http://microsoft.com/appmagic/Component",
  "IsComponentLocked": false,
  "IsComponentTemplate": true,
  "IsCustomGroupControlTemplate": false,
  "IsPcfControl": false,
  "IsPremiumPcfControl": false,
  "IsWidgetTemplate": false,
  "LastModifiedTimestamp": "638381146836211793",
  "Name": "11eb2bdcb8cc446f936b6a174302ce25",
  "OverridableProperties": {},
  "TemplateOriginalName": "f06d4642bcff40f091423eb8af2debbc",
  "Version": "637369188230457253"
}